[
    {
        "id": "c55952f9a2e6f5ad",
        "type": "tab",
        "label": "Emitter",
        "disabled": false,
        "info": ""
    },
    {
        "id": "2a06c3eaf95875ce",
        "type": "tab",
        "label": "Receiver Routeur",
        "disabled": false,
        "info": ""
    },
    {
        "id": "af65abbe3b92bf48",
        "type": "tab",
        "label": "GRAFANA Test",
        "disabled": false,
        "info": ""
    },
    {
        "id": "148cf492650303f7",
        "type": "tab",
        "label": "Receiver BE",
        "disabled": false,
        "info": ""
    },
    {
        "id": "75898e4317a6ab68",
        "type": "tab",
        "label": "Testing Windy GPS Mode",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "d0a9f9ad2d5ea0b2",
        "type": "tab",
        "label": "Flow 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "bd99be41.16e01",
        "type": "tab",
        "label": "RTL-AIS",
        "disabled": false,
        "info": ""
    },
    {
        "id": "950abffd.4f08b8",
        "type": "tab",
        "label": "Sample file",
        "disabled": false,
        "info": ""
    },
    {
        "id": "f6755db8.da6748",
        "type": "tab",
        "label": "Web decoder",
        "disabled": false,
        "info": ""
    },
    {
        "id": "4540fc6b92d5bc8f",
        "type": "tab",
        "label": "AIS Distance Filter ",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "73b0418053a0d6b8",
        "type": "tab",
        "label": "WINDY GPRMC TEST ",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "bfb33fbf22a9ec29",
        "type": "tab",
        "label": "Test Flows",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "3a7412efe0b5441b",
        "type": "tab",
        "label": "Test Flow 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "2a5ca215d45c03e1",
        "type": "mqtt-broker",
        "name": "HiveHQ",
        "broker": "adb72c5db88b4aeb8a3d96ad3b5c074d.s1.eu.hivemq.cloud",
        "port": "8883",
        "tls": "e48656f36231fcdc",
        "clientid": "DemoMQTT2",
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "packt",
        "birthQos": "1",
        "birthRetain": "true",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "e48656f36231fcdc",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": true,
        "alpnprotocol": ""
    },
    {
        "id": "d8f5182d.3296f8",
        "type": "mqtt-broker",
        "name": "HiveMQ",
        "broker": "adb72c5db88b4aeb8a3d96ad3b5c074d.s1.eu.hivemq.cloud",
        "port": "8883",
        "tls": "e48656f36231fcdc",
        "clientid": "",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "373fa459.54e07c",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "WEATHER",
        "name": "Weather",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x",
        "url": "",
        "rejectUnauthorized": false
    },
    {
        "id": "5c3a4e27.a99f9",
        "type": "mqtt-broker",
        "name": "",
        "broker": "192.168.1.136",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "WIND ",
        "birthQos": "1",
        "birthRetain": "true",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "f39a553a.48d3d8",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "order": 1
    },
    {
        "id": "42f8f6e6.576c38",
        "type": "ui_group",
        "name": "Devices",
        "tab": "f39a553a.48d3d8",
        "order": 1,
        "disp": true,
        "width": "6"
    },
    {
        "id": "67d8508e3a69ceda",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "ea3c9844d1f0e6e9",
        "type": "tls-config",
        "name": "",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "",
        "verifyservercert": true,
        "alpnprotocol": ""
    },
    {
        "id": "cc83c777841edb0d",
        "type": "websocket-listener",
        "path": "",
        "wholemsg": "false"
    },
    {
        "id": "116cae3ca980f270",
        "type": "udp in",
        "z": "c55952f9a2e6f5ad",
        "name": "Centrale Exocet Silver",
        "iface": "",
        "port": "1034",
        "ipv": "udp4",
        "multicast": "false",
        "group": "",
        "datatype": "utf8",
        "x": 180,
        "y": 740,
        "wires": [
            [
                "f63b6eb9bc8ba0f2"
            ]
        ]
    },
    {
        "id": "f63b6eb9bc8ba0f2",
        "type": "switch",
        "z": "c55952f9a2e6f5ad",
        "name": "Routeur de Trames NMEA",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "$IIVHW",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "$IIMWD",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "$HCHDT",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "$IIMWV",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 440,
        "y": 740,
        "wires": [
            [
                "2e33fc990821c8a5"
            ],
            [
                "a0dc19f123f4d7dc"
            ],
            [
                "2d40697a636a6749"
            ],
            [
                "554bea6df05537bb"
            ]
        ]
    },
    {
        "id": "fe1de246d68f96df",
        "type": "join",
        "z": "c55952f9a2e6f5ad",
        "name": "Array For Indexing",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 910,
        "y": 880,
        "wires": [
            [
                "033a522b0a0b778f"
            ]
        ]
    },
    {
        "id": "4f1f76573c4e4f98",
        "type": "batch",
        "z": "c55952f9a2e6f5ad",
        "name": "True Wind Buffer",
        "mode": "count",
        "count": "2",
        "overlap": 0,
        "interval": "8",
        "allowEmptySequence": false,
        "topics": [],
        "x": 710,
        "y": 880,
        "wires": [
            [
                "fe1de246d68f96df"
            ]
        ]
    },
    {
        "id": "033a522b0a0b778f",
        "type": "function",
        "z": "c55952f9a2e6f5ad",
        "name": "Filtre ",
        "func": "\nfor (let i = 0; i < msg.payload.length ; i++){\n    for (let j = i + 1; j < msg.payload.length ; j++){\n        if (msg.payload[i] != msg.payload[j]){\n            var output = { payload:msg.payload[j] };\n            return output;\n        }\n       \n    }\n    \n}\n\n// Do NOT put return msg HERE !!!!!",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 880,
        "wires": [
            [
                "4f1f76573c4e4f98",
                "bec5eca04c2f5c34"
            ]
        ]
    },
    {
        "id": "6d387d4495716732",
        "type": "mqtt out",
        "z": "c55952f9a2e6f5ad",
        "name": "CentraleMQTTOut",
        "topic": "CentraleMQTTOut",
        "qos": "0",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "d8f5182d.3296f8",
        "x": 1530,
        "y": 680,
        "wires": []
    },
    {
        "id": "1af395e114d36b2a",
        "type": "file",
        "z": "c55952f9a2e6f5ad",
        "name": "Centrale Logger",
        "filename": "/home/pi/Documents/LogsNav/CentraleLoggerRepetitions.txt",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 1420,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "ea86ded645b641d4",
        "type": "function",
        "z": "c55952f9a2e6f5ad",
        "name": "Log Temps + Payload",
        "func": "var m_names = new Array(\"January\", \"February\", \"March\", \n\"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \n\"October\", \"November\", \"December\");\n\nvar mydate = new Date();\nvar curr_date = mydate.getDate();\nvar curr_month = mydate.getMonth()+ 1; // Because the array starts from 0\nvar curr_year = mydate.getFullYear();\n\nvar mydatestr = '' + curr_year  + '-' +\ncurr_month + '-' + \ncurr_date+ ' ' +\nmydate.getHours() + ':' +\nmydate.getMinutes() + ':' + \nmydate.getSeconds() + '.' + \nmydate.getMilliseconds()\n\n\n\n\nmsg.payload = mydatestr + \"{\" + msg.payload\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1500,
        "y": 780,
        "wires": [
            [
                "1af395e114d36b2a"
            ]
        ]
    },
    {
        "id": "8ab3934f86fa40c8",
        "type": "link in",
        "z": "c55952f9a2e6f5ad",
        "name": "",
        "links": [
            "bec5eca04c2f5c34"
        ],
        "x": 1315,
        "y": 740,
        "wires": [
            [
                "6d387d4495716732",
                "ea86ded645b641d4"
            ]
        ]
    },
    {
        "id": "bec5eca04c2f5c34",
        "type": "link out",
        "z": "c55952f9a2e6f5ad",
        "name": "",
        "links": [
            "8ab3934f86fa40c8"
        ],
        "x": 1235,
        "y": 740,
        "wires": []
    },
    {
        "id": "2d40697a636a6749",
        "type": "batch",
        "z": "c55952f9a2e6f5ad",
        "name": "$HCHDT Buffer",
        "mode": "count",
        "count": "1",
        "overlap": 0,
        "interval": "8",
        "allowEmptySequence": false,
        "topics": [],
        "x": 740,
        "y": 740,
        "wires": [
            [
                "cf8846aa6a7bff8d"
            ]
        ]
    },
    {
        "id": "cf8846aa6a7bff8d",
        "type": "delay",
        "z": "c55952f9a2e6f5ad",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "2",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": true,
        "outputs": 1,
        "x": 980,
        "y": 740,
        "wires": [
            [
                "bec5eca04c2f5c34"
            ]
        ]
    },
    {
        "id": "2e33fc990821c8a5",
        "type": "batch",
        "z": "c55952f9a2e6f5ad",
        "name": "$IIVHW Buffer ",
        "mode": "count",
        "count": "1",
        "overlap": 0,
        "interval": "8",
        "allowEmptySequence": false,
        "topics": [],
        "x": 740,
        "y": 620,
        "wires": [
            [
                "1179b448d4b4e1cb"
            ]
        ]
    },
    {
        "id": "1179b448d4b4e1cb",
        "type": "delay",
        "z": "c55952f9a2e6f5ad",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "2",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": true,
        "outputs": 1,
        "x": 980,
        "y": 620,
        "wires": [
            [
                "bec5eca04c2f5c34"
            ]
        ]
    },
    {
        "id": "a0dc19f123f4d7dc",
        "type": "batch",
        "z": "c55952f9a2e6f5ad",
        "name": "$IIMWD Buffer",
        "mode": "count",
        "count": "1",
        "overlap": 0,
        "interval": "8",
        "allowEmptySequence": false,
        "topics": [],
        "x": 740,
        "y": 680,
        "wires": [
            [
                "dd405b8401217627"
            ]
        ]
    },
    {
        "id": "dd405b8401217627",
        "type": "delay",
        "z": "c55952f9a2e6f5ad",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "2",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": true,
        "outputs": 1,
        "x": 980,
        "y": 680,
        "wires": [
            [
                "bec5eca04c2f5c34"
            ]
        ]
    },
    {
        "id": "e2c204918d65dbf1",
        "type": "udp in",
        "z": "c55952f9a2e6f5ad",
        "name": "GPS Exocet Silver",
        "iface": "",
        "port": "1036",
        "ipv": "udp4",
        "multicast": "false",
        "group": "",
        "datatype": "utf8",
        "x": 210,
        "y": 1160,
        "wires": [
            [
                "239db8e4fc23546c",
                "5c995c6a30234311",
                "4ca012cc4ae9e675"
            ]
        ]
    },
    {
        "id": "239db8e4fc23546c",
        "type": "delay",
        "z": "c55952f9a2e6f5ad",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "2",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": true,
        "outputs": 1,
        "x": 400,
        "y": 1160,
        "wires": [
            [
                "0500dc7f1d8eaab0",
                "d1b6208616406aca",
                "ca23863ad3eee8e8"
            ]
        ]
    },
    {
        "id": "0500dc7f1d8eaab0",
        "type": "mqtt out",
        "z": "c55952f9a2e6f5ad",
        "name": "GPSMQTTOut",
        "topic": "GPSMQTTOut",
        "qos": "0",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "d8f5182d.3296f8",
        "x": 640,
        "y": 1160,
        "wires": []
    },
    {
        "id": "649e85f638fb66c8",
        "type": "file",
        "z": "c55952f9a2e6f5ad",
        "name": "GPS Logger",
        "filename": "/home/pi/Documents/LogsNav/CentraleLogger.txt",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 850,
        "y": 1220,
        "wires": [
            []
        ]
    },
    {
        "id": "d1b6208616406aca",
        "type": "function",
        "z": "c55952f9a2e6f5ad",
        "name": "Log Temps + Payload",
        "func": "// A vérifier : \n// Peut-on supprimer le array m_names ? \nvar m_names = new Array(\"January\", \"February\", \"March\", \n\"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \n\"October\", \"November\", \"December\");\n\n// Sur Javascript la fonction new Date() récupère la date qui figure sur l'horloge du Raspberry \n// Cette fonction retourne le string suivant par exemple: \n// Wed Mar 25 2015 01:00:00 GMT+0100 (Central European Standard Time)\n// Ce dernier est difficilement exploitable \nvar mydate = new Date();\nvar curr_date = mydate.getDate();\nvar curr_month = mydate.getMonth()+ 1; // In JavaScript, the first month (January) is month number 0\nvar curr_year = mydate.getFullYear();\n\n// Création de MON format d'horaire \nvar mydatestr = '' + curr_year  + '-' +\ncurr_month + '-' + \ncurr_date+ ' ' +\nmydate.getHours() + ':' +\nmydate.getMinutes() + ':' + \nmydate.getSeconds() + '.' + \nmydate.getMilliseconds()\n\n// Sortie : \n// 2015-03-25 01:00:00\n\n\n// Formatage du message transmit\n// Le symbole { permettra par la suite de 'split' le string en 2 colonnes par exemple\n// Une solution plus elegante serait d'utiliser un dictionnaire ? Voir ci dessous \n// msg.payload = {date: mydatestr, payload: msg.payload};\n\n\nmsg.payload = mydatestr + \"{\" + msg.payload // Output = string \nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 1220,
        "wires": [
            [
                "649e85f638fb66c8"
            ]
        ]
    },
    {
        "id": "8afad7f451492e11",
        "type": "comment",
        "z": "c55952f9a2e6f5ad",
        "name": "UDP GPS IN",
        "info": "",
        "x": 210,
        "y": 1100,
        "wires": []
    },
    {
        "id": "e5e174b1f83b2d5a",
        "type": "comment",
        "z": "c55952f9a2e6f5ad",
        "name": "Envoie Trames Centrale",
        "info": "",
        "x": 180,
        "y": 640,
        "wires": []
    },
    {
        "id": "c74599eae3b5c025",
        "type": "comment",
        "z": "c55952f9a2e6f5ad",
        "name": "Filtre Temps",
        "info": "",
        "x": 890,
        "y": 560,
        "wires": []
    },
    {
        "id": "522597fc9c3494f4",
        "type": "comment",
        "z": "c55952f9a2e6f5ad",
        "name": "Time Filter",
        "info": "",
        "x": 400,
        "y": 1100,
        "wires": []
    },
    {
        "id": "20f6a4c4b8deecd2",
        "type": "comment",
        "z": "c55952f9a2e6f5ad",
        "name": "Filtre Répétitions",
        "info": "",
        "x": 880,
        "y": 820,
        "wires": []
    },
    {
        "id": "554bea6df05537bb",
        "type": "switch",
        "z": "c55952f9a2e6f5ad",
        "name": "$IIMWV Buffer",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": ",T,",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": ",R,",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 480,
        "y": 920,
        "wires": [
            [
                "4f1f76573c4e4f98"
            ],
            [
                "86e25be5ab4f5ced"
            ]
        ]
    },
    {
        "id": "78cabf0af6e745a4",
        "type": "join",
        "z": "c55952f9a2e6f5ad",
        "name": "Array For Indexing",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 910,
        "y": 960,
        "wires": [
            [
                "15092bb781f55a34"
            ]
        ]
    },
    {
        "id": "86e25be5ab4f5ced",
        "type": "batch",
        "z": "c55952f9a2e6f5ad",
        "name": "Relat Wind Buffer",
        "mode": "count",
        "count": "2",
        "overlap": 0,
        "interval": "8",
        "allowEmptySequence": false,
        "topics": [],
        "x": 710,
        "y": 960,
        "wires": [
            [
                "78cabf0af6e745a4"
            ]
        ]
    },
    {
        "id": "15092bb781f55a34",
        "type": "function",
        "z": "c55952f9a2e6f5ad",
        "name": "Filtre ",
        "func": "\nfor (let i = 0; i < msg.payload.length ; i++){\n    for (let j = i + 1; j < msg.payload.length ; j++){\n        if (msg.payload[i] != msg.payload[j]){\n            var output = { payload:msg.payload[j] };\n            return output;\n        }\n       \n    }\n    \n}\n\n// Do NOT put return msg HERE !!!!!",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 960,
        "wires": [
            [
                "86e25be5ab4f5ced",
                "bec5eca04c2f5c34"
            ]
        ]
    },
    {
        "id": "04d55b3e13582790",
        "type": "udp in",
        "z": "c55952f9a2e6f5ad",
        "name": "XDR Greement",
        "iface": "",
        "port": "1035",
        "ipv": "udp4",
        "multicast": "false",
        "group": "",
        "datatype": "utf8",
        "x": 160,
        "y": 1700,
        "wires": [
            [
                "6eda2ce95539685c"
            ]
        ]
    },
    {
        "id": "4f7253039e988dc3",
        "type": "udp in",
        "z": "c55952f9a2e6f5ad",
        "name": "XDR Environment",
        "iface": "",
        "port": "1045",
        "ipv": "udp4",
        "multicast": "false",
        "group": "",
        "datatype": "utf8",
        "x": 170,
        "y": 1760,
        "wires": [
            [
                "77b69328c1c5f1fa"
            ]
        ]
    },
    {
        "id": "6eda2ce95539685c",
        "type": "delay",
        "z": "c55952f9a2e6f5ad",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "8",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": true,
        "outputs": 1,
        "x": 420,
        "y": 1700,
        "wires": [
            [
                "2e50ab6e4ea05042"
            ]
        ]
    },
    {
        "id": "2e50ab6e4ea05042",
        "type": "mqtt out",
        "z": "c55952f9a2e6f5ad",
        "name": "XDRGreementMQTTOut",
        "topic": "XDRGreementMQTTOut",
        "qos": "0",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "d8f5182d.3296f8",
        "x": 670,
        "y": 1700,
        "wires": []
    },
    {
        "id": "de7c8c21fc71a6cb",
        "type": "comment",
        "z": "c55952f9a2e6f5ad",
        "name": "Time Filters",
        "info": "",
        "x": 450,
        "y": 1640,
        "wires": []
    },
    {
        "id": "77b69328c1c5f1fa",
        "type": "delay",
        "z": "c55952f9a2e6f5ad",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "8",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": true,
        "outputs": 1,
        "x": 420,
        "y": 1760,
        "wires": [
            [
                "70229e3a5bc05d6d"
            ]
        ]
    },
    {
        "id": "70229e3a5bc05d6d",
        "type": "mqtt out",
        "z": "c55952f9a2e6f5ad",
        "name": "XDREnvironnementMQTTOut",
        "topic": "XDREnvironnementMQTTOut",
        "qos": "0",
        "retain": "true",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "d8f5182d.3296f8",
        "x": 690,
        "y": 1760,
        "wires": []
    },
    {
        "id": "ca23863ad3eee8e8",
        "type": "debug",
        "z": "c55952f9a2e6f5ad",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 1100,
        "wires": []
    },
    {
        "id": "061c4c4fcb0d5a12",
        "type": "function",
        "z": "c55952f9a2e6f5ad",
        "name": "counter",
        "func": "// Get the current value of the 'count' context property - default to 0\nvar count = flow.get(\"count\")||0;\n\nif (msg.topic === \"init\") {\n // set its value locally\n count = msg.payload;\n \n} else if (msg.topic === \"increment\")  {\n count=count+1;\n} else if (msg.topic === \"decrement\")  {\n count--;\n}\n// Save the new value back to context so it will be available next time\nflow.set('count',count);\n\n// \n// Update the message payload and return - no need to create a new msg\n// msg.payload = \"$GPRMC,075128.000,A,\"+ count +\",N,00322.268,W,0.1,268.6,240921,0.0,E,A*10\";\nmsg.payload = \"$GPRMC,075128.000,A,4742.43,N,00322.268,W,0.1,268.6,240921,0.0,E,A*10\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 1440,
        "wires": [
            [
                "a23a4b0ae7d0ceb5"
            ]
        ]
    },
    {
        "id": "f0ecc0546fdef48f",
        "type": "inject",
        "z": "c55952f9a2e6f5ad",
        "name": "4742.43",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "init",
        "payload": "4742.43",
        "payloadType": "num",
        "x": 160,
        "y": 1400,
        "wires": [
            [
                "061c4c4fcb0d5a12"
            ]
        ]
    },
    {
        "id": "23ce017f573a1022",
        "type": "inject",
        "z": "c55952f9a2e6f5ad",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "increment",
        "payloadType": "str",
        "x": 150,
        "y": 1480,
        "wires": [
            [
                "061c4c4fcb0d5a12"
            ]
        ]
    },
    {
        "id": "a23a4b0ae7d0ceb5",
        "type": "function",
        "z": "c55952f9a2e6f5ad",
        "name": "Vers ordinateur sur Network Local ",
        "func": "ipAdress = ['192.168.1.135','192.168.1.137']\n\n\nfor (i = 0; i < ipAdress.length; i++){\n    msg.port = 504;\n    msg.ip = ipAdress[i];\n    node.send(msg)\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 1440,
        "wires": [
            []
        ]
    },
    {
        "id": "2387aebf18529434",
        "type": "comment",
        "z": "c55952f9a2e6f5ad",
        "name": "UDP XDR IN",
        "info": "",
        "x": 210,
        "y": 1640,
        "wires": []
    },
    {
        "id": "5c995c6a30234311",
        "type": "delay",
        "z": "c55952f9a2e6f5ad",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "5",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": true,
        "outputs": 1,
        "x": 440,
        "y": 1280,
        "wires": [
            [
                "eeac32a88630c5f3"
            ]
        ]
    },
    {
        "id": "eeac32a88630c5f3",
        "type": "udp out",
        "z": "c55952f9a2e6f5ad",
        "name": "",
        "addr": "192.168.100.11",
        "iface": "",
        "port": "504",
        "ipv": "udp4",
        "outport": "",
        "base64": false,
        "multicast": "false",
        "x": 710,
        "y": 1280,
        "wires": []
    },
    {
        "id": "4ca012cc4ae9e675",
        "type": "delay",
        "z": "c55952f9a2e6f5ad",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "5",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": true,
        "outputs": 1,
        "x": 440,
        "y": 1340,
        "wires": [
            [
                "63c6a813b48d88c5"
            ]
        ]
    },
    {
        "id": "63c6a813b48d88c5",
        "type": "udp out",
        "z": "c55952f9a2e6f5ad",
        "name": "",
        "addr": "192.168.100.12",
        "iface": "",
        "port": "504",
        "ipv": "udp4",
        "outport": "",
        "base64": false,
        "multicast": "false",
        "x": 710,
        "y": 1340,
        "wires": []
    },
    {
        "id": "6a2d575e17c02690",
        "type": "comment",
        "z": "c55952f9a2e6f5ad",
        "name": "For Windy",
        "info": "",
        "x": 920,
        "y": 1300,
        "wires": []
    },
    {
        "id": "d10dd3a663fe2e76",
        "type": "mqtt in",
        "z": "2a06c3eaf95875ce",
        "name": "",
        "topic": "GPSMQTTOut",
        "qos": "0",
        "datatype": "auto",
        "broker": "d8f5182d.3296f8",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 220,
        "y": 220,
        "wires": [
            [
                "8d938cdc933d7cb3",
                "abaedd1a371e8176"
            ]
        ]
    },
    {
        "id": "90b42e2bbcdb3ca0",
        "type": "mqtt in",
        "z": "2a06c3eaf95875ce",
        "name": "",
        "topic": "CENTRALEMQTTOut",
        "qos": "0",
        "datatype": "auto",
        "broker": "d8f5182d.3296f8",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 240,
        "y": 380,
        "wires": [
            [
                "0272de9d08f4b7dd",
                "bfe7e084b3764e13"
            ]
        ]
    },
    {
        "id": "8d938cdc933d7cb3",
        "type": "debug",
        "z": "2a06c3eaf95875ce",
        "name": "GPS",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 450,
        "y": 160,
        "wires": []
    },
    {
        "id": "681d9f68979822f3",
        "type": "udp out",
        "z": "2a06c3eaf95875ce",
        "name": "GPS Out To Computer",
        "addr": "",
        "iface": "",
        "port": "",
        "ipv": "udp4",
        "outport": "",
        "base64": false,
        "multicast": "false",
        "x": 840,
        "y": 220,
        "wires": []
    },
    {
        "id": "abaedd1a371e8176",
        "type": "function",
        "z": "2a06c3eaf95875ce",
        "name": "Vers ordinateur sur Network Local ",
        "func": "for (i = 2100; i < 2110; i++){\n    msg.port = i;\n    msg.ip = \"192.168.1.145\";\n    node.send(msg)\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 220,
        "wires": [
            [
                "681d9f68979822f3"
            ]
        ]
    },
    {
        "id": "0272de9d08f4b7dd",
        "type": "debug",
        "z": "2a06c3eaf95875ce",
        "name": "CENTRALE",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 320,
        "wires": []
    },
    {
        "id": "7af1d93c18661267",
        "type": "udp out",
        "z": "2a06c3eaf95875ce",
        "name": "Centrale Out To Computer",
        "addr": "",
        "iface": "",
        "port": "",
        "ipv": "udp4",
        "outport": "",
        "base64": false,
        "multicast": "false",
        "x": 890,
        "y": 380,
        "wires": []
    },
    {
        "id": "bfe7e084b3764e13",
        "type": "function",
        "z": "2a06c3eaf95875ce",
        "name": "Vers ordinateur sur Network Local ",
        "func": "for (i = 2110; i < 2120; i++){\n    msg.port = i;\n    msg.ip = \"192.168.1.135\";\n    node.send(msg)\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 380,
        "wires": [
            [
                "7af1d93c18661267"
            ]
        ]
    },
    {
        "id": "a8032a6be43f9199",
        "type": "mqtt in",
        "z": "2a06c3eaf95875ce",
        "name": "",
        "topic": "XDRGreementMQTTOut",
        "qos": "0",
        "datatype": "auto",
        "broker": "d8f5182d.3296f8",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 250,
        "y": 540,
        "wires": [
            [
                "2ccab32ac4c3a8dc",
                "48c25fa1a73de0c2"
            ]
        ]
    },
    {
        "id": "2ccab32ac4c3a8dc",
        "type": "debug",
        "z": "2a06c3eaf95875ce",
        "name": "XDR Greement",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 480,
        "wires": []
    },
    {
        "id": "56dc22a2e75b7501",
        "type": "udp out",
        "z": "2a06c3eaf95875ce",
        "name": "Centrale Out To Computer",
        "addr": "",
        "iface": "",
        "port": "",
        "ipv": "udp4",
        "outport": "",
        "base64": false,
        "multicast": "false",
        "x": 950,
        "y": 540,
        "wires": []
    },
    {
        "id": "48c25fa1a73de0c2",
        "type": "function",
        "z": "2a06c3eaf95875ce",
        "name": "Vers ordinateur sur Network Local ",
        "func": "for (i = 2120; i < 2130; i++){\n    msg.port = i;\n    msg.ip = \"192.168.1.135\";\n    node.send(msg)\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 540,
        "wires": [
            [
                "56dc22a2e75b7501"
            ]
        ]
    },
    {
        "id": "174b37959ecbeecd",
        "type": "mqtt in",
        "z": "2a06c3eaf95875ce",
        "name": "",
        "topic": "XDREnvironnementMQTTOut",
        "qos": "0",
        "datatype": "auto",
        "broker": "d8f5182d.3296f8",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 260,
        "y": 700,
        "wires": [
            [
                "7562a9d89c159654",
                "5023625d4b4e96be"
            ]
        ]
    },
    {
        "id": "7562a9d89c159654",
        "type": "debug",
        "z": "2a06c3eaf95875ce",
        "name": "XDR Enviro",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 590,
        "y": 640,
        "wires": []
    },
    {
        "id": "ef8d054fb164663a",
        "type": "udp out",
        "z": "2a06c3eaf95875ce",
        "name": "Centrale Out To Computer",
        "addr": "",
        "iface": "",
        "port": "",
        "ipv": "udp4",
        "outport": "",
        "base64": false,
        "multicast": "false",
        "x": 970,
        "y": 700,
        "wires": []
    },
    {
        "id": "5023625d4b4e96be",
        "type": "function",
        "z": "2a06c3eaf95875ce",
        "name": "Vers ordinateur sur Network Local ",
        "func": "for (i = 2130; i < 2140; i++){\n    msg.port = i;\n    msg.ip = \"192.168.1.135\";\n    node.send(msg)\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 700,
        "wires": [
            [
                "ef8d054fb164663a"
            ]
        ]
    },
    {
        "id": "f02104c744536b4e",
        "type": "function",
        "z": "af65abbe3b92bf48",
        "name": "Parse message",
        "func": "var msg433 = {};\nmsg.payload = msg.payload.replace(/(\\r\\n|\\n|\\r)/gm,\"\");\nvar parts433 = msg.payload.split(\";\");\n\nmsg433.p1 = parts433[0];\nmsg433.p2 = parts433[1];\nmsg433.name = parts433[2];\nfor (var i=3; i<parts433.length; i++) {\n    var keyvalue = parts433[i].split(\"=\");\n    if (keyvalue.length===2) {\n        msg433[keyvalue[0]] = keyvalue[1];\n    }\n}\n\nmsg.msg433 = msg433;\nmsg.topic=\"rflink\";\n\nreturn msg;\n\n/*\n\n// So firstly a generic means of getting incoming items into an object\n\nvar the433 = {};\nmsg.payload = msg.payload.replace(/(\\r\\n|\\n|\\r)/gm,\"\");\nnode.warn(msg.payload);\nvar parts433 = msg.payload.split(\";\");\n\nthe433.p1 = parts433[0];\nthe433.p2 = parts433[1];\nthe433.name = parts433[2];\n\nvar a = 3;\nwhile (a < parts433.length) {\n    var bits433 = parts433[a].split(\"=\");\n    switch (bits433[0]) {\n        case \"ID\": the433.id = bits433[1]; break;\n        case \"SWITCH\": the433.switch = bits433[1]; break;\n        case \"CMD\": the433.cmd = bits433[1]; break;\n        case \"SET_LEVEL\": the433.set_level = parseInt(bits433[1], 10); break;\n        case \"TEMP\": the433.temp = parseInt(bits433[1], 16) / 10; break;\n        case \"HUM\": the433.hum = parseInt(bits433[1], 10); break;\n        case \"BARO\": the433.baro = parseInt(bits433[1], 16); break;\n        case \"HSTATUS\": the433.hstatus = parseInt(bits433[1], 10); break;\n        case \"BFORECAST\": the433.bforecast = parseInt(bits433[1], 10); break;\n        case \"UV\": the433.uv = parseInt(bits433[1], 16); break;\n        case \"LUX\": the433.lux = parseInt(bits433[1], 16); break;\n        case \"BAT\": the433.bat = bits433[1]; break;\n        case \"RAIN\": the433.rain = parseInt(bits433[1], 16) / 10; break;\n        case \"RAIN\": the433.rainrate = parseInt(bits433[1], 16) / 10; break;\n        case \"WINSP\": the433.winsp = parseInt(bits433[1], 16) / 10; break;\n        case \"AWINSP\": the433.awinsp = parseInt(bits433[1], 16) / 10; break;\n        case \"WINGS\": the433.wings = parseInt(bits433[1], 16); break;\n        case \"WINDIR\": the433.windir = parseInt(bits433[1], 10); break;\n        case \"WINCHL\": the433.winchl = parseInt(bits433[1], 16); break;\n        case \"WINTMP\": the433.wintmp = parseInt(bits433[1], 16); break;\n        case \"CHIME\": the433.chime = parseInt(bits433[1], 10); break;\n        case \"SMOKEALERT\": the433.smokealert = bits433[1]; break;\n        case \"PIR\": the433.pir = bits433[1]; break;\n        case \"CO2\": the433.co2 = parseInt(bits433[1], 10); break;\n        case \"SOUND\": the433.sound = parseInt(bits433[1], 10); break;\n        case \"KWATT\": the433.kwatt = parseInt(bits433[1], 16); break;\n        case \"WATT\": the433.watt = parseInt(bits433[1], 16); break;\n        case \"CURRENT\": the433.current = parseInt(bits433[1], 10); break;\n        case \"CURRENT2\": the433.current2 = parseInt(bits433[1], 10); break;\n        case \"CURRENT3\": the433.current3 = parseInt(bits433[1], 10); break;\n        case \"DIST\": the433.dist = parseInt(bits433[1], 10); break;\n        case \"METER\": the433.meter = parseInt(bits433[1], 10); break;\n        case \"VOLT\": the433.volt = parseInt(bits433[1], 10); break;\n        case \"RGBW\": the433.rgbc = parseInt(bits433[1].substring(0, 2), 16);\n            the433.rgbw = parseInt(bits433[1].substring(2, 4), 16); break;\n    }\n    a++;\n}\n\n// SO - the above is general... here is my specific setup for temporarily displaying\n// the Acurite info\nif ((the433.p1 == \"20\") && (the433.name == \"Acurite\") && (the433.id == \"c826\")) {\n    if (typeof the433.temp !== 'undefined') temp = the433.temp;\n    if (typeof the433.hum !== 'undefined') hum = the433.hum;\n    if (typeof the433.bat !== 'undefined') bat = the433.bat;\n    if (typeof the433.rain !== 'undefined') rain = the433.rain;\n    if (typeof the433.winsp !== 'undefined') winsp = the433.winsp;\n    if (typeof the433.windir !== 'undefined') windir = the433.windir;\n\n    node.warn(\"Temperature: \" + temp + \"c\");\n    node.warn(\"Humidity: \" + hum + \"%\");\n    node.warn(\"Battery: \" + bat);\n    node.warn(\"Rain: \" + rain + \"mm\");\n    node.warn(\"Wind Speed: \" + winsp + \"km/h\");\n    node.warn(\"Wind Dir: \" + (windir * 22.5) + \" degrees\");\n}\n\n*/",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 160,
        "wires": [
            [
                "8d5ef9007829ba65"
            ]
        ]
    },
    {
        "id": "8d5ef9007829ba65",
        "type": "function",
        "z": "af65abbe3b92bf48",
        "name": "HUM conversion",
        "func": "if (msg.msg433.HUM!==undefined) {\n    msg.msg433.HUM = parseInt(msg.msg433.HUM, 10);\n}\nelse msg.msg433.HUM=-999.0;\nnode.status({fill:\"blue\",shape:\"ring\",text: msg.msg433.HUM });\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 260,
        "wires": [
            [
                "1541738fc091510e"
            ]
        ]
    },
    {
        "id": "1541738fc091510e",
        "type": "function",
        "z": "af65abbe3b92bf48",
        "name": "ID conversion",
        "func": "if (msg.msg433.ID!==undefined) {\n    msg.msg433.ID = parseInt(msg.msg433.ID, 16);\n}\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 617,
        "y": 353,
        "wires": [
            [
                "7253b5a291e0b004"
            ]
        ]
    },
    {
        "id": "44fd4c1bd7846972",
        "type": "change",
        "z": "af65abbe3b92bf48",
        "name": "Set Topic",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "rflink",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 840,
        "y": 480,
        "wires": [
            [
                "9cc1fe08eeab96b6"
            ]
        ]
    },
    {
        "id": "9cc1fe08eeab96b6",
        "type": "function",
        "z": "af65abbe3b92bf48",
        "name": "Weather Station",
        "func": "msg.payload = {\n    name: msg.msg433.name,\n\n    wind: msg.msg433.WINSP,\n    gust: msg.msg433.WINGS,\n    humidity: msg.msg433.HUM,\n\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "3f3372e91df90606",
        "type": "influxdb out",
        "z": "af65abbe3b92bf48",
        "influxdb": "373fa459.54e07c",
        "name": "Weather",
        "measurement": "stations",
        "precision": "s",
        "retentionPolicy": "",
        "database": "",
        "retentionPolicyV18Flux": "",
        "org": "",
        "bucket": "",
        "x": 1060,
        "y": 480,
        "wires": []
    },
    {
        "id": "faba117899f62d65",
        "type": "function",
        "z": "af65abbe3b92bf48",
        "name": "generator",
        "func": "a = Math.round(Math.random() *100)\nb = Math.round(Math.random() *10)\ne = Math.round(Math.random() *100)\nc = e + 200\nd = a**2 + b - c\n//msg.payload = Math.round( Math.random() *100)\nif (a > 20){\n    msg.payload = \"20;02;DKW2012;ID=0043;HUM=\" + a + \";WINSP=\" + d + \";WINGS=\" + c + \";\"\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 300,
        "wires": [
            [
                "f02104c744536b4e"
            ]
        ]
    },
    {
        "id": "c1164afd74388afe",
        "type": "inject",
        "z": "af65abbe3b92bf48",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 130,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "7253b5a291e0b004",
        "type": "function",
        "z": "af65abbe3b92bf48",
        "name": "WINSP conversion",
        "func": "if (msg.msg433.WINSP!==undefined) {\n    msg.msg433.WINSP = parseInt(msg.msg433.WINSP, 10);\n}\nelse msg.msg433.WINSP=-999.0;\nnode.status({fill:\"blue\",shape:\"ring\",text: msg.msg433.WINSP });\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 420,
        "wires": [
            [
                "89eb12a7fb123cc7"
            ]
        ]
    },
    {
        "id": "89eb12a7fb123cc7",
        "type": "function",
        "z": "af65abbe3b92bf48",
        "name": "WINGS conversion",
        "func": "if (msg.msg433.WINGS!==undefined) {\n    msg.msg433.WINGS  = parseInt(msg.msg433.WINGS, 10);\n}\nelse msg.msg433.WINGS=-999.0;\nnode.status({fill:\"blue\",shape:\"ring\",text: msg.msg433.WINGS });\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 480,
        "wires": [
            [
                "44fd4c1bd7846972"
            ]
        ]
    },
    {
        "id": "b9a09814ae8bc3f5",
        "type": "inject",
        "z": "af65abbe3b92bf48",
        "name": "reset",
        "props": [
            {
                "p": "reset",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 150,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "56117f7ff9921393",
        "type": "mqtt in",
        "z": "148cf492650303f7",
        "name": "",
        "topic": "GPSMQTTOut",
        "qos": "0",
        "datatype": "auto",
        "broker": "d8f5182d.3296f8",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 200,
        "y": 260,
        "wires": [
            [
                "185dfcf07599d477",
                "d0a7b5a7fb025c89",
                "09505e0ddbf190e3",
                "5fec290345cacaa2",
                "18fdc21c08e73c21"
            ]
        ]
    },
    {
        "id": "e700823b4473246d",
        "type": "mqtt in",
        "z": "148cf492650303f7",
        "name": "",
        "topic": "CentraleMQTTOut",
        "qos": "0",
        "datatype": "auto",
        "broker": "d8f5182d.3296f8",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 210,
        "y": 500,
        "wires": [
            [
                "dbd5b3b5efa7fbcb",
                "f62bd6cef7155446",
                "57893ccda9ad1b60"
            ]
        ]
    },
    {
        "id": "185dfcf07599d477",
        "type": "debug",
        "z": "148cf492650303f7",
        "name": "GPS Debugger",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 200,
        "wires": []
    },
    {
        "id": "cb3093ea63b3a8b8",
        "type": "udp out",
        "z": "148cf492650303f7",
        "name": "UDP [ 2100 - 2110 ]",
        "addr": "",
        "iface": "",
        "port": "",
        "ipv": "udp4",
        "outport": "",
        "base64": false,
        "multicast": "false",
        "x": 730,
        "y": 320,
        "wires": []
    },
    {
        "id": "d0a7b5a7fb025c89",
        "type": "function",
        "z": "148cf492650303f7",
        "name": "Computer's IP and UDP",
        "func": "for (i = 2100; i < 2110; i++){\n    msg.port = i;\n    msg.ip = \"192.168.1.125\";\n    node.send(msg)\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 320,
        "wires": [
            [
                "cb3093ea63b3a8b8"
            ]
        ]
    },
    {
        "id": "dbd5b3b5efa7fbcb",
        "type": "debug",
        "z": "148cf492650303f7",
        "name": "Centrale Debugger",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 470,
        "y": 440,
        "wires": []
    },
    {
        "id": "4c49ae718d6cffa6",
        "type": "udp out",
        "z": "148cf492650303f7",
        "name": "UDP [ 2111 - 2120 ]",
        "addr": "",
        "iface": "",
        "port": "",
        "ipv": "udp4",
        "outport": "",
        "base64": false,
        "multicast": "false",
        "x": 730,
        "y": 560,
        "wires": []
    },
    {
        "id": "f62bd6cef7155446",
        "type": "function",
        "z": "148cf492650303f7",
        "name": "Computer's IP and UDP",
        "func": "for (i = 2110; i < 2120; i++){\n    msg.port = i;\n    msg.ip = \"192.168.1.125\";\n    node.send(msg)\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 560,
        "wires": [
            [
                "4c49ae718d6cffa6"
            ]
        ]
    },
    {
        "id": "ed0afa4bb7ee22e1",
        "type": "file",
        "z": "148cf492650303f7",
        "name": "GPS Logs",
        "filename": "/home/pi/Documents/LogsNav/27_09_2021/GPSMQTTOut.txt",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 630,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "f20e1eb22ec4e89b",
        "type": "file",
        "z": "148cf492650303f7",
        "name": "Centrale Logs",
        "filename": "/home/pi/Documents/LogsNav/25_09_2021/CENTRALEMQTTOut.txt",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 720,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "09505e0ddbf190e3",
        "type": "function",
        "z": "148cf492650303f7",
        "name": "Time + Payload",
        "func": "var m_names = new Array(\"January\", \"February\", \"March\", \n\"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \n\"October\", \"November\", \"December\");\n\nvar mydate = new Date();\nvar curr_date = mydate.getDate();\nvar curr_month = mydate.getMonth()+ 1; // Because the array starts from 0\nvar curr_year = mydate.getFullYear();\n\nvar mydatestr = '' + curr_year  + '-' +\ncurr_month + '-' + \ncurr_date+ ' ' +\nmydate.getHours() + ':' +\nmydate.getMinutes() + ':' + \nmydate.getSeconds() + '.' + \nmydate.getMilliseconds()\n\n\n\n\nmsg.payload = mydatestr + \"{\" + msg.payload\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 260,
        "wires": [
            [
                "ed0afa4bb7ee22e1"
            ]
        ]
    },
    {
        "id": "e964b783ad9f6d62",
        "type": "mqtt in",
        "z": "148cf492650303f7",
        "name": "",
        "topic": "HeureMQTTOut",
        "qos": "0",
        "datatype": "auto",
        "broker": "d8f5182d.3296f8",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 240,
        "y": 2180,
        "wires": [
            [
                "87a9424c5e7555f3",
                "33d6c7b3562d0cc1",
                "e529caabd24c2a37"
            ]
        ]
    },
    {
        "id": "87a9424c5e7555f3",
        "type": "debug",
        "z": "148cf492650303f7",
        "name": "Heure",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 2040,
        "wires": []
    },
    {
        "id": "3f7a1817940190e6",
        "type": "udp out",
        "z": "148cf492650303f7",
        "name": "Heure Out To Computer",
        "addr": "",
        "iface": "",
        "port": "",
        "ipv": "udp4",
        "outport": "",
        "base64": false,
        "multicast": "false",
        "x": 890,
        "y": 2140,
        "wires": []
    },
    {
        "id": "33d6c7b3562d0cc1",
        "type": "function",
        "z": "148cf492650303f7",
        "name": "Vers ordinateur sur Network Local ",
        "func": "for (i = 3110; i < 3120; i++){\n    msg.port = i;\n    msg.ip = \"192.168.1.136\";\n    node.send(msg)\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 2140,
        "wires": [
            [
                "3f7a1817940190e6"
            ]
        ]
    },
    {
        "id": "87752f4a3eb05641",
        "type": "file",
        "z": "148cf492650303f7",
        "name": "",
        "filename": "/home/pi/Documents/LogsNav/25_09_2021/HeureMQTTOut.txt",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 970,
        "y": 2260,
        "wires": [
            []
        ]
    },
    {
        "id": "57893ccda9ad1b60",
        "type": "function",
        "z": "148cf492650303f7",
        "name": "Time + Payload",
        "func": "//var m_names = new Array(\"January\", \"February\", \"March\", \n//\"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \n//\"October\", \"November\", \"December\");\n\nvar mydate = new Date();\nvar curr_date = mydate.getDate();\nvar curr_month = mydate.getMonth()+ 1; // Because the array starts from 0\nvar curr_year = mydate.getFullYear();\n\nvar mydatestr = '' + curr_year  + '-' +\ncurr_month + '-' + \ncurr_date+ ' ' +\nmydate.getHours() + ':' +\nmydate.getMinutes() + ':' + \nmydate.getSeconds()  + '.' + \nmydate.getMilliseconds()\n\n\n\nmsg.payload = mydatestr + \"{\" + msg.payload\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 500,
        "wires": [
            [
                "f20e1eb22ec4e89b"
            ]
        ]
    },
    {
        "id": "e529caabd24c2a37",
        "type": "function",
        "z": "148cf492650303f7",
        "name": "",
        "func": "var m_names = new Array(\"January\", \"February\", \"March\", \n\"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \n\"October\", \"November\", \"December\");\n\nvar mydate = new Date();\nvar curr_date = mydate.getDate();\nvar curr_month = mydate.getMonth()+ 1; // Because the array starts from 0\nvar curr_year = mydate.getFullYear();\n\nvar mydatestr = '' + curr_year  + '-' +\ncurr_month + '-' + \ncurr_date+ ' ' +\nmydate.getHours() + ':' +\nmydate.getMinutes() + ':' + \nmydate.getSeconds() + '.' + \nmydate.getMilliseconds()\n\n\n\n\nmsg.payload = mydatestr + \"{\" + msg.payload\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 2260,
        "wires": [
            [
                "87752f4a3eb05641"
            ]
        ]
    },
    {
        "id": "abe2fff6044aa913",
        "type": "mqtt in",
        "z": "148cf492650303f7",
        "name": "",
        "topic": "XDRGreementMQTTOut",
        "qos": "0",
        "datatype": "auto",
        "broker": "d8f5182d.3296f8",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 230,
        "y": 720,
        "wires": [
            [
                "75642d0e0c1d9b39",
                "4c6e20179f94a1ee",
                "23ad9efec0f512c2"
            ]
        ]
    },
    {
        "id": "75642d0e0c1d9b39",
        "type": "debug",
        "z": "148cf492650303f7",
        "name": "XDR Greement Debugger",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 660,
        "wires": []
    },
    {
        "id": "fb3505a880fe2e1e",
        "type": "udp out",
        "z": "148cf492650303f7",
        "name": "UDP [ 2121 - 2130 ]",
        "addr": "",
        "iface": "",
        "port": "",
        "ipv": "udp4",
        "outport": "",
        "base64": false,
        "multicast": "false",
        "x": 770,
        "y": 780,
        "wires": []
    },
    {
        "id": "4c6e20179f94a1ee",
        "type": "function",
        "z": "148cf492650303f7",
        "name": "Computer's IP and UDP",
        "func": "for (i = 2121; i < 2130; i++){\n    msg.port = i;\n    msg.ip = \"192.168.1.140\";\n    node.send(msg)\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 780,
        "wires": [
            [
                "fb3505a880fe2e1e"
            ]
        ]
    },
    {
        "id": "c53dfefcb98253a7",
        "type": "file",
        "z": "148cf492650303f7",
        "name": "CDR Greement Logs",
        "filename": "/home/pi/Documents/LogsNav/25_09_2021/XDRGreement.txt",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 720,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "23ad9efec0f512c2",
        "type": "function",
        "z": "148cf492650303f7",
        "name": "Time + Payload",
        "func": "//var m_names = new Array(\"January\", \"February\", \"March\", \n//\"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \n//\"October\", \"November\", \"December\");\n\nvar mydate = new Date();\nvar curr_date = mydate.getDate();\nvar curr_month = mydate.getMonth()+ 1; // Because the array starts from 0\nvar curr_year = mydate.getFullYear();\n\nvar mydatestr = '' + curr_year  + '-' +\ncurr_month + '-' + \ncurr_date+ ' ' +\nmydate.getHours() + ':' +\nmydate.getMinutes() + ':' + \nmydate.getSeconds()  + '.' + \nmydate.getMilliseconds()\n\n\n\nmsg.payload = mydatestr + \"{\" + msg.payload\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 720,
        "wires": [
            [
                "c53dfefcb98253a7"
            ]
        ]
    },
    {
        "id": "d2c46c1d42fae2e4",
        "type": "mqtt in",
        "z": "148cf492650303f7",
        "name": "",
        "topic": "XDREnvironnementMQTTOut",
        "qos": "0",
        "datatype": "auto",
        "broker": "d8f5182d.3296f8",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 240,
        "y": 920,
        "wires": [
            [
                "107e57ec50b55375",
                "cf235caf515baf68",
                "e9723799741de676"
            ]
        ]
    },
    {
        "id": "107e57ec50b55375",
        "type": "debug",
        "z": "148cf492650303f7",
        "name": "XDR Enviro Debugger",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 860,
        "wires": []
    },
    {
        "id": "3a0d01b08b417358",
        "type": "udp out",
        "z": "148cf492650303f7",
        "name": "UDP [ 2131 - 2140 ]",
        "addr": "",
        "iface": "",
        "port": "",
        "ipv": "udp4",
        "outport": "",
        "base64": false,
        "multicast": "false",
        "x": 770,
        "y": 980,
        "wires": []
    },
    {
        "id": "cf235caf515baf68",
        "type": "function",
        "z": "148cf492650303f7",
        "name": "Computer's IP and UDP",
        "func": "for (i = 2110; i < 2120; i++){\n    msg.port = i;\n    msg.ip = \"192.168.1.136\";\n    node.send(msg)\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 980,
        "wires": [
            [
                "3a0d01b08b417358"
            ]
        ]
    },
    {
        "id": "9aad9510b1b834fb",
        "type": "file",
        "z": "148cf492650303f7",
        "name": "XDR Environment Logs",
        "filename": "/home/pi/Documents/LogsNav/25_09_2021/XDRenviro.txt",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 730,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "e9723799741de676",
        "type": "function",
        "z": "148cf492650303f7",
        "name": "Time + Payload",
        "func": "//var m_names = new Array(\"January\", \"February\", \"March\", \n//\"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \n//\"October\", \"November\", \"December\");\n\nvar mydate = new Date();\nvar curr_date = mydate.getDate();\nvar curr_month = mydate.getMonth()+ 1; // Because the array starts from 0\nvar curr_year = mydate.getFullYear();\n\nvar mydatestr = '' + curr_year  + '-' +\ncurr_month + '-' + \ncurr_date+ ' ' +\nmydate.getHours() + ':' +\nmydate.getMinutes() + ':' + \nmydate.getSeconds()  + '.' + \nmydate.getMilliseconds()\n\n\n\nmsg.payload = mydatestr + \"{\" + msg.payload\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 920,
        "wires": [
            [
                "9aad9510b1b834fb"
            ]
        ]
    },
    {
        "id": "73ac95a014c77f90",
        "type": "comment",
        "z": "148cf492650303f7",
        "name": "MQTT IN",
        "info": "",
        "x": 180,
        "y": 200,
        "wires": []
    },
    {
        "id": "825a616fd8c9e454",
        "type": "udp out",
        "z": "148cf492650303f7",
        "name": "UDP [ 2100 - 2110 ]",
        "addr": "",
        "iface": "",
        "port": "",
        "ipv": "udp4",
        "outport": "",
        "base64": false,
        "multicast": "false",
        "x": 730,
        "y": 100,
        "wires": []
    },
    {
        "id": "5fec290345cacaa2",
        "type": "function",
        "z": "148cf492650303f7",
        "name": "Raspberry's IP and UDP",
        "func": "for (i = 2100; i < 2110; i++){\n    msg.port = i;\n    msg.ip = \"192.168.1.145\";\n    node.send(msg)\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 100,
        "wires": [
            [
                "825a616fd8c9e454"
            ]
        ]
    },
    {
        "id": "636d3183ed84f704",
        "type": "udp out",
        "z": "148cf492650303f7",
        "name": "UDP 504",
        "addr": "",
        "iface": "",
        "port": "",
        "ipv": "udp4",
        "outport": "",
        "base64": false,
        "multicast": "false",
        "x": 700,
        "y": 40,
        "wires": []
    },
    {
        "id": "18fdc21c08e73c21",
        "type": "function",
        "z": "148cf492650303f7",
        "name": "Pour Windy",
        "func": "ipAdress = ['192.168.1.125','192.168.1.137','192.168.1.124','192.168.1.133','192.168.1.140']\n\n\nfor (i = 0; i < ipAdress.length; i++){\n    msg.port = 504;\n    msg.ip = ipAdress[i];\n    node.send(msg)\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 40,
        "wires": [
            [
                "636d3183ed84f704"
            ]
        ]
    },
    {
        "id": "2f406df589d18951",
        "type": "udp out",
        "z": "75898e4317a6ab68",
        "name": "",
        "addr": "",
        "iface": "",
        "port": "",
        "ipv": "udp4",
        "outport": "",
        "base64": false,
        "multicast": "false",
        "x": 1010,
        "y": 400,
        "wires": []
    },
    {
        "id": "1227b68f.ead989",
        "type": "function",
        "z": "75898e4317a6ab68",
        "name": "counter",
        "func": "// Get the current value of the 'count' context property - default to 0\nvar count = flow.get(\"count\")||0;\n\nif (msg.topic === \"init\") {\n // set its value locally\n count = msg.payload;\n \n} else if (msg.topic === \"increment\")  {\n count=count+1;\n} else if (msg.topic === \"decrement\")  {\n count--;\n}\n// Save the new value back to context so it will be available next time\nflow.set('count',count);\n\n// \n// Update the message payload and return - no need to create a new msg\nmsg.payload = \"$GPRMC,075128.000,A,\"+ count +\",N,00322.268,W,0.1,268.6,240921,0.0,E,A*10\";\n//msg.payload = \"$GPRMC,075128.000,A,5000.00,N,05000.00,W,0.1,268.6,240921,0.0,E,A*10\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 400,
        "wires": [
            [
                "7b8c8c3aef5617c0",
                "f9c4f6a47547fa61"
            ]
        ]
    },
    {
        "id": "749c878c.234b48",
        "type": "inject",
        "z": "75898e4317a6ab68",
        "name": "4742.43",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "init",
        "payload": "4742.43",
        "payloadType": "num",
        "x": 180,
        "y": 300,
        "wires": [
            [
                "1227b68f.ead989"
            ]
        ]
    },
    {
        "id": "5905f8b1.98de18",
        "type": "inject",
        "z": "75898e4317a6ab68",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "increment",
        "payloadType": "str",
        "x": 190,
        "y": 400,
        "wires": [
            [
                "1227b68f.ead989"
            ]
        ]
    },
    {
        "id": "41054bc1.6ff844",
        "type": "inject",
        "z": "75898e4317a6ab68",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "decrement",
        "payloadType": "str",
        "x": 180,
        "y": 480,
        "wires": [
            [
                "1227b68f.ead989"
            ]
        ]
    },
    {
        "id": "7b8c8c3aef5617c0",
        "type": "function",
        "z": "75898e4317a6ab68",
        "name": "Vers ordinateur sur Network Local ",
        "func": "ipAdress = ['192.168.1.135','192.168.1.149']\n\n\nfor (i = 0; i < ipAdress.length; i++){\n    msg.port = 504;\n    msg.ip = ipAdress[i];\n    node.send(msg)\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 400,
        "wires": [
            [
                "2f406df589d18951"
            ]
        ]
    },
    {
        "id": "f9c4f6a47547fa61",
        "type": "debug",
        "z": "75898e4317a6ab68",
        "name": "counter",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 300,
        "wires": []
    },
    {
        "id": "88e32bce.f600b8",
        "type": "udp in",
        "z": "bd99be41.16e01",
        "name": "rtl-ais",
        "iface": "",
        "port": "10110",
        "ipv": "udp4",
        "multicast": "false",
        "group": "",
        "datatype": "utf8",
        "x": 150,
        "y": 160,
        "wires": [
            [
                "51696a9f.be3804"
            ]
        ]
    },
    {
        "id": "a54ead5.d1139d",
        "type": "ais-decoder",
        "z": "bd99be41.16e01",
        "name": "",
        "x": 450,
        "y": 160,
        "wires": [
            [
                "c4b8de59.2cf9f"
            ]
        ]
    },
    {
        "id": "3bb49be2.69784c",
        "type": "file",
        "z": "bd99be41.16e01",
        "name": "Live output file",
        "filename": "/home/pi/node-red-contrib-ais-decoder/live-output.json",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 780,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "d5c86b82.6d0ac8",
        "type": "comment",
        "z": "bd99be41.16e01",
        "name": "Live AIS",
        "info": "# Live AIS data recorder\n# \nThis flow listens on port 10110 for UDP packets from the rtl-ais software. It decodes the packets and stores the decoded information in JSON format in a local file.\n\nIf an erroneous packet is detected, a message is logged in the node-red debugger.\n",
        "x": 160,
        "y": 100,
        "wires": []
    },
    {
        "id": "51696a9f.be3804",
        "type": "split",
        "z": "bd99be41.16e01",
        "name": "",
        "splt": "\\r",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 290,
        "y": 160,
        "wires": [
            [
                "a54ead5.d1139d"
            ]
        ],
        "info": "If the datagram from rtl-ais contains multiple AIS message fragments, split them into individual node-red messages."
    },
    {
        "id": "c4b8de59.2cf9f",
        "type": "switch",
        "z": "bd99be41.16e01",
        "name": "",
        "property": "resultCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 610,
        "y": 160,
        "wires": [
            [
                "3bb49be2.69784c"
            ],
            [],
            [],
            [
                "6b2524e.b6d2b5c"
            ]
        ]
    },
    {
        "id": "6b2524e.b6d2b5c",
        "type": "debug",
        "z": "bd99be41.16e01",
        "name": "Error",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "x": 750,
        "y": 180,
        "wires": []
    },
    {
        "id": "fdc840bf.b0bd9",
        "type": "file in",
        "z": "950abffd.4f08b8",
        "name": "Sample File",
        "filename": "/home/pi/node-red-contrib-ais-decoder/nmea-sample",
        "format": "lines",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 290,
        "y": 180,
        "wires": [
            [
                "b2dec9b.ddf75b8"
            ]
        ]
    },
    {
        "id": "6966f255.365a94",
        "type": "inject",
        "z": "950abffd.4f08b8",
        "name": "Timestamp",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 120,
        "y": 180,
        "wires": [
            [
                "fdc840bf.b0bd9"
            ]
        ]
    },
    {
        "id": "b2dec9b.ddf75b8",
        "type": "ais-decoder",
        "z": "950abffd.4f08b8",
        "name": "",
        "x": 490,
        "y": 180,
        "wires": [
            [
                "dbf2135d.3486d8"
            ]
        ]
    },
    {
        "id": "dbf2135d.3486d8",
        "type": "switch",
        "z": "950abffd.4f08b8",
        "name": "",
        "property": "resultCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "3",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 670,
        "y": 180,
        "wires": [
            [
                "d7e067eb.11877"
            ],
            [
                "ac719f74.bc8b78"
            ],
            []
        ]
    },
    {
        "id": "d7e067eb.11877",
        "type": "debug",
        "z": "950abffd.4f08b8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 870,
        "y": 140,
        "wires": []
    },
    {
        "id": "ac719f74.bc8b78",
        "type": "function",
        "z": "950abffd.4f08b8",
        "name": "Filter",
        "func": "// Use this node to filter messages.\n// The code below only allows type 5 messages through.\n\nif (msg.payload.messageType==5) { \n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "x": 870,
        "y": 200,
        "wires": [
            [
                "2906c0f4.27b318"
            ]
        ]
    },
    {
        "id": "2906c0f4.27b318",
        "type": "debug",
        "z": "950abffd.4f08b8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "x": 1010,
        "y": 200,
        "wires": []
    },
    {
        "id": "93a77705.0c5ac",
        "type": "comment",
        "z": "950abffd.4f08b8",
        "name": "Sample file decoding",
        "info": "# AIS Message File Decoding\n# \nEdit the Sample File node to specify a file of AIS messages to process. Use the Filter node to pick out particular message types you are interested in. Click the button on the Timestamp node to initiate the decode.\n\nA large sample file of AIS messages can be found at the [AIS Hub](http://www.aishub.net/downloads/nmea-sample.zip).",
        "x": 160,
        "y": 100,
        "wires": []
    },
    {
        "id": "24738581.8f23f2",
        "type": "http response",
        "z": "f6755db8.da6748",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 550,
        "y": 680,
        "wires": []
    },
    {
        "id": "44787b67.025ed4",
        "type": "ais-decoder",
        "z": "f6755db8.da6748",
        "name": "",
        "x": 170,
        "y": 240,
        "wires": [
            [
                "c4def35b.f2c5d"
            ]
        ]
    },
    {
        "id": "bb9b126d.0c53e",
        "type": "function",
        "z": "f6755db8.da6748",
        "name": "Trim",
        "func": "if (msg.payload.message) {\n    msg.payload = msg.payload.message.trim();\n} else {\n    msg.payload = \"\";\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 140,
        "wires": [
            [
                "690d0dbe.6270f4"
            ]
        ]
    },
    {
        "id": "969b4057.05a828",
        "type": "template",
        "z": "f6755db8.da6748",
        "name": "Results table",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<table style=\\\"width:50%\\\">\n    \n<tr><td>Original AIS message:</td><td style=\"font-family:courier;\">{{{originalAisMessage_text}}}</td></tr>\n\n<tr><td>Talker ID:</td><td>{{payload.talkerId}} ({{payload.talkerId_text}})</td></tr>\n\n<tr><td>Message type:</td><td>{{payload.messageType}} ({{payload.messageType_text}})\n</td></tr>\n\n<tr><td>Repeat indicator:</td><td>{{payload.repeatIndicator}}</td></tr>\n\n<tr><td>Mobile Marine Service identifier:</td><td>{{payload.senderMmsi}}</td></tr>\n\n{{#payload.messageSubtype_text}}\n<tr><td>Message {{payload.messageType}} subtype:</td><td>{{payload.messageSubtype_text}}</td></tr>\n{{/payload.messageSubtype_text}}\n\n{{#payload.name}}\n<tr><td>Vessel name:</td><td>{{payload.name}}</td></tr>\n{{/payload.name}}\n\n{{#payload.callsign}}\n<tr><td>Callsign:</td><td>{{payload.callsign}}</td></tr>\n{{/payload.callsign}}\n\n{{#payload.navigationStatus_text}}\n<tr><td>Navigation status:</td><td>{{payload.navigationStatus}} ({{payload.navigationStatus_text}})\n</td></tr>\n{{/payload.navigationStatus_text}}\n\n{{#payload.latitude}}\n<tr><td>Latitude:</td><td>{{payload.latitude}}</td></tr>\n{{/payload.latitude}}\n\n{{#payload.longitude}}\n<tr><td>Longitude:</td><td>{{payload.longitude}}</td></tr>\n{{/payload.longitude}}\n\n{{#payload.positionAccurate}}\n<tr><td>Position accurate to 10m or better:</td><td>{{payload.positionAccurate}}</td></tr>\n{{/payload.positionAccurate}}\n\n{{#payload.speedOverGround}}\n<tr><td>Speed over ground:</td><td>{{payload.speedOverGround}} knots</td></tr>\n{{/payload.speedOverGround}}\n\n{{#payload.courseOverGround}}\n<tr><td>Course over ground:</td><td>{{payload.courseOverGround}}</td></tr>\n{{/payload.courseOverGround}}\n\n{{#payload.trueHeading}}\n<tr><td>True heading:</td><td>{{payload.trueHeading}}</td></tr>\n{{/payload.trueHeading}}\n\n{{#payload.turningDirection_text}}\n<tr><td>Turning status:</td><td>{{payload.turningDirection_text}}</td></tr>\n{{/payload.turningDirection_text}}\n\n{{#payload.turningRate}}\n<tr><td>Turning rate:</td><td>{{payload.turningRate}} degrees/minute</td></tr>\n{{/payload.turningRate}}\n\n{{#payload.timeStampSeconds}}\n<tr><td>Timestamp:</td><td>{{payload.timeStampSeconds}} s</td></tr>\n{{/payload.timeStampSeconds}}\n\n{{#payload.positioningSystemStatus_text}}\n<tr><td>Positioning system status:</td><td>{{payload.positioningSystemStatus}} ({{payload.positioningSystemStatus_text}})</td></tr>\n{{/payload.positioningSystemStatus_text}}\n\n{{#payload.manoeuver_text}}\n<tr><td>Special manoeuver:</td><td>{{payload.manoeuver}} ({{payload.manoeuver_text}})</td></tr>\n{{/payload.manoeuver_text}}\n\n{{#payload.shipType_text}}\n<tr><td>Ship type:</td><td>{{payload.shipType}} ({{payload.shipType_text}})</td></tr>\n{{/payload.shipType_text}}\n\n{{#payload.fixType_text}}\n<tr><td>Position fix type:</td><td>{{payload.fixType}} ({{payload.fixType_text}})</td></tr>\n{{/payload.fixType_text}}\n\n{{#payload.navAid_text}}\n<tr><td>Navaid type:</td><td>{{payload.navAid}} ({{payload.navAid_text}})</td></tr>\n{{/payload.navAid_text}}\n\n{{#payload.raim}}\n<tr><td>RAIM:</td><td>{{payload.raim}}</td></tr>\n{{/payload.raim}}\n\n{{#payload.dte}}\n<tr><td>DTE:</td><td>{{payload.dte}}</td></tr>\n{{/payload.dte}}\n\n{{#payload.offPosition}}\n<tr><td>Off position:</td><td>{{payload.offPosition}}</td></tr>\n{{/payload.offPosition}}\n\n{{#payload.virtualAid}}\n<tr><td>Virtual navaid:</td><td>{{payload.virtualAid}}</td></tr>\n{{/payload.virtualAid}}\n\n{{#payload.assignedMode}}\n<tr><td>Assigned mode:</td><td>{{payload.assignedMode}}</td></tr>\n{{/payload.assignedMode}}\n\n{{#payload.altitude}}\n<tr><td>Altitude:</td><td>{{payload.altitude}}</td></tr>\n{{/payload.altitude}}\n\n{{#payload.version}}\n<tr><td>Version of spec:</td><td>{{payload.version}}</td></tr>\n{{/payload.version}}\n\n{{#payload.shipId}}\n<tr><td>IMO ship ID:</td><td>{{payload.shipId}}</td></tr>\n{{/payload.shipId}}\n\n{{#payload.dimensionToBow}}\n<tr><td>Distance to bow:</td><td>{{payload.dimensionToBow}} m</td></tr>\n{{/payload.dimensionToBow}}\n\n{{#payload.dimensionToStern}}\n<tr><td>Distance to stern:</td><td>{{payload.dimensionToStern}} m</td></tr>\n{{/payload.dimensionToStern}}\n\n{{#payload.dimensionToPort}}\n<tr><td>Distance to port:</td><td>{{payload.dimensionToPort}} m</td></tr>\n{{/payload.dimensionToPort}}\n\n{{#payload.dimensionToStarboard}}\n<tr><td>Distance to starboard:</td><td>{{payload.dimensionToStarboard}} m</td></tr>\n{{/payload.dimensionToStarboard}}\n\n{{#payload.draught}}\n<tr><td>Draught:</td><td>{{payload.draught}} m</td></tr>\n{{/payload.draught}}\n\n{{#payload.destination}}\n<tr><td>Destination:</td><td>{{payload.destination}}</td></tr>\n{{/payload.destination}}\n\n{{#payload.eta}}\n<tr><td>Estimated time of arrival:</td><td>{{payload.eta}}</td></tr>\n{{/payload.eta}}\n\n{{#payload.baseTime}}\n<tr><td>UTC at base station:</td><td>{{payload.baseTime}}</td></tr>\n{{/payload.baseTime}}\n\n{{#payload.destinationMmsi}}\n<tr><td>MMSI of addressed station:</td><td>{{payload.destinationMmsi}}</td></tr>\n{{/payload.destinationMmsi}}\n\n{{#payload.sequenceNumber}}\n<tr><td>Sequence number:</td><td>{{payload.sequenceNumber}}</td></tr>\n{{/payload.sequenceNumber}}\n\n{{#payload.retransmitted}}\n<tr><td>Retransmitted:</td><td>{{payload.retransmitted}}</td></tr>\n{{/payload.retransmitted}}\n\n{{#payload.designatedAreaCode}}\n<tr><td>Designated area code:</td><td>{{payload.designatedAreaCode}}</td></tr>\n{{/payload.designatedAreaCode}}\n\n{{#payload.functionalId}}\n<tr><td>Functional ID:</td><td>{{payload.functionalId}}</td></tr>\n{{/payload.functionalId}}\n\n{{#payload.binaryData}}\n<tr><td>Binary data:</td><td>{{payload.binaryData}}</td></tr>\n{{/payload.binaryData}}\n\n{{#payload.numberOfPersons}}\n<tr><td>Number of persons on board:</td><td>{{payload.numberOfPersons}}</td></tr>\n{{/payload.numberOfPersons}}\n\n{{#payload.textMessage}}\n<tr><td>Text message:</td><td>{{payload.textMessage}}</td></tr>\n{{/payload.textMessage}}\n\n{{#payload.textMessageSequenceNumber}}\n<tr><td>Text message sequence number:</td><td>{{payload.textMessageSequenceNumber}}</td></tr>\n{{/payload.textMessageSequenceNumber}}\n\n{{#payload.mothershipMmsi}}\n<tr><td>Mothership MMSI:</td><td>{{payload.mothershipMmsi}}</td></tr>\n{{/payload.mothershipMmsi}}\n\n{{#payload.vendorId}}\n<tr><td>AIS equipment vendor ID:</td><td>{{payload.vendorId}}</td></tr>\n{{/payload.vendorId}}\n\n{{#payload.unitModelCode}}\n<tr><td>AIS equipment model:</td><td>{{payload.unitModelCode}}</td></tr>\n{{/payload.unitModelCode}}\n\n{{#payload.unitSerialNumber}}\n<tr><td>AIS equipment serial number:</td><td>{{payload.unitSerialNumber}}</td></tr>\n{{/payload.unitSerialNumber}}\n\n{{#payload.dgnssCorrection}}\n<tr><td>DGNSS correction data:</td><td>{{payload.dgnssCorrection}}</td></tr>\n{{/payload.dgnssCorrection}}\n\n{{#payload.mmsi_text}}\n<tr><td>MMSI:</td><td>{{{payload.mmsi_text}}}</td></tr>\n{{/payload.mmsi_text}}\n\n{{#payload.offset_text}}\n<tr><td>Offset number:</td><td>{{{payload.offset_text}}}</td></tr>\n{{/payload.offset_text}}\n\n{{#payload.increment_text}}\n<tr><td>Increment:</td><td>{{{payload.increment_text}}}</td></tr>\n{{/payload.increment_text}}\n\n{{#payload.number_text}}\n<tr><td>Consecutive slots:</td><td>{{{payload.number_text}}}</td></tr>\n{{/payload.number_text}}\n\n{{#payload.timeout_text}}\n<tr><td>Allocation timeout:</td><td>{{{payload.timeout_text}}}</td></tr>\n{{/payload.timeout_text}}\n\n{{#payload.channelA}}\n<tr><td>Channel A:</td><td>{{payload.channelA}}</td></tr>\n{{/payload.channelA}}\n\n{{#payload.channelB}}\n<tr><td>Channel B:</td><td>{{payload.channelB}}</td></tr>\n{{/payload.channelB}}\n\n{{#payload.txrxMode_text}}\n<tr><td>Transmit/receive mode:</td><td>{{payload.txrxMode_text}}</td></tr>\n{{/payload.txrxMode_text}}\n\n{{#payload.channelAbw}}\n<tr><td>Use narrow bandwidth on channel A:</td><td>{{payload.channelAbw}}</td></tr>\n{{/payload.channelAbw}}\n\n{{#payload.channelBbw}}\n<tr><td>Use narrow bandwidth on channel B:</td><td>{{payload.channelBbw}}</td></tr>\n{{/payload.channelBbw}}\n\n{{#payload.highPower}}\n<tr><td>Use high power:</td><td>{{payload.highPower}}</td></tr>\n{{/payload.highPower}}\n\n{{#payload.latlongNE}}\n<tr><td>NE corner of zone:</td><td>{{{payload.latlongNE}}}</td></tr>\n{{/payload.latlongNE}}\n\n{{#payload.latlongSW}}\n<tr><td>SW corner of zone:</td><td>{{{payload.latlongSW}}}</td></tr>\n{{/payload.latlongSW}}\n\n{{#payload.zoneSize}}\n<tr><td>Transition zone size:</td><td>{{payload.zoneSize}}</td></tr>\n{{/payload.zoneSize}}\n\n</table>\n<br><br>\n",
        "output": "str",
        "x": 590,
        "y": 420,
        "wires": [
            [
                "b390488e.581d"
            ]
        ]
    },
    {
        "id": "d13c6e34.0b70e",
        "type": "comment",
        "z": "f6755db8.da6748",
        "name": "Online AIS decoder",
        "info": "# Online AIS Message Decoder\n# \nGo to http://your.own.ip.address:1880/aisdecode then enter an AIS message and click Decode.\n\nThe Results Table node can be configured to display more of the decoded information.\nNote that there's a bug in that template - it does not display data if the data evaluates to \"false\" - so if a vessel's course happens to be due North (zero degrees), it will not be displayed.",
        "x": 130,
        "y": 80,
        "wires": []
    },
    {
        "id": "a6ae6b68.96b3",
        "type": "template",
        "z": "f6755db8.da6748",
        "name": "Error table",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<table style=\\\"width:30%; border: 1px solid red;\\\">\n<tr><td style=\"border: 1px solid red;\">Original AIS message:</td><td style=\"font-family:courier; border: 1px solid red;\">{{originalAisMessage_text}}</td></tr>\n<tr><td style=\"border: 1px solid red;\">Decode error:</td><td style=\"border: 1px solid red;\">{{errorInfo}}</td></tr>\n</table>\n<br><br>\n",
        "output": "str",
        "x": 590,
        "y": 500,
        "wires": [
            [
                "b390488e.581d"
            ]
        ]
    },
    {
        "id": "1ad9cc4e.a321dc",
        "type": "http in",
        "z": "f6755db8.da6748",
        "name": "",
        "url": "/aisdecode",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 200,
        "y": 140,
        "wires": [
            [
                "bb9b126d.0c53e"
            ]
        ]
    },
    {
        "id": "690d0dbe.6270f4",
        "type": "split",
        "z": "f6755db8.da6748",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 510,
        "y": 140,
        "wires": [
            [
                "44787b67.025ed4"
            ]
        ]
    },
    {
        "id": "a78766c5.f4b24",
        "type": "switch",
        "z": "f6755db8.da6748",
        "name": "",
        "property": "resultCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 170,
        "y": 460,
        "wires": [
            [
                "fe9d120e.be0fb"
            ],
            [
                "b390488e.581d"
            ],
            [
                "b390488e.581d"
            ],
            [
                "a6ae6b68.96b3"
            ]
        ]
    },
    {
        "id": "b390488e.581d",
        "type": "join",
        "z": "f6755db8.da6748",
        "name": "",
        "mode": "auto",
        "build": "string",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": "false",
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "x": 770,
        "y": 460,
        "wires": [
            [
                "1c255446.6d553c"
            ]
        ]
    },
    {
        "id": "1c255446.6d553c",
        "type": "template",
        "z": "f6755db8.da6748",
        "name": "Main page",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html>\n<head>\n<style>\ntable, th, td {\n  border: 1px solid black;\n  border-collapse: collapse;\n  padding: 15px;\n  text-align: left;\n}\n</style>\n</head>\n\n<body>\n<h1>Online AIS decoder</h1>\n<p>Enter one or more AIS messages, then click \"Decode\".<br>\nExample message: !AIVDM,1,1,,B,33P7k`@Oi?wVpv0PB7@=`bw`00pA,0*7B</p>\n\n<form action=\"/aisdecode\">\n<textarea name=\"message\" rows=\"10\" cols=\"100\"></textarea><br>\n<input type=\"submit\" value=\"Decode\">\n</form>\n<br><br>\n{{{payload}}}\n\n</body>\n</html>\n",
        "output": "str",
        "x": 390,
        "y": 680,
        "wires": [
            [
                "24738581.8f23f2"
            ]
        ]
    },
    {
        "id": "fe9d120e.be0fb",
        "type": "function",
        "z": "f6755db8.da6748",
        "name": "Pre-process results",
        "func": "// Now to get round the limitations of mustache...\n\n// Ensure uninterpreted numbers which might be 0 are textified for display\nif (!isNaN(msg.payload.turningRate)) msg.payload.turningRate = String(msg.payload.turningRate);\nif (!isNaN(msg.payload.speedOverGround)) msg.payload.speedOverGround = String(msg.payload.speedOverGround);\nif (!isNaN(msg.payload.courseOverGround)) msg.payload.courseOverGround = String(msg.payload.courseOverGround);\nif (!isNaN(msg.payload.trueHeading)) msg.payload.trueHeading = String(msg.payload.trueHeading);\nif (!isNaN(msg.payload.latitude)) msg.payload.latitude = String(msg.payload.latitude);\nif (!isNaN(msg.payload.longitude)) msg.payload.longitude = String(msg.payload.longitude);\nif (!isNaN(msg.payload.altitude)) msg.payload.altitude = String(msg.payload.altitude);\nif (!isNaN(msg.payload.sequenceNumber)) msg.payload.sequenceNumber = String(msg.payload.sequenceNumber);\nif (!isNaN(msg.payload.timeStampSeconds)) msg.payload.timeStampSeconds = String(msg.payload.timeStampSeconds);\nif (!isNaN(msg.payload.version)) msg.payload.version = String(msg.payload.version);\nif (!isNaN(msg.payload.shipId)) msg.payload.shipId = String(msg.payload.shipId);\nif (!isNaN(msg.payload.draught)) msg.payload.draught = String(msg.payload.draught);\nif (!isNaN(msg.payload.designatedAreaCode)) msg.payload.designatedAreaCode = String(msg.payload.designatedAreaCode);\nif (!isNaN(msg.payload.functionalId)) msg.payload.functionalId = String(msg.payload.functionalId);\nif (!isNaN(msg.payload.numberOfPersons)) msg.payload.numberOfPersons = String(msg.payload.numberOfPersons);\nif (!isNaN(msg.payload.zoneSize)) msg.payload.zoneSize = String(msg.payload.zoneSize);\nif (!isNaN(msg.payload.latitudeNE)) msg.payload.latitudeNE = String(msg.payload.latitudeNE);\nif (!isNaN(msg.payload.longitudeNE)) msg.payload.longitudeNE = String(msg.payload.longitudeNE);\nif (!isNaN(msg.payload.latitudeSW)) msg.payload.latitudeSW = String(msg.payload.latitudeSW);\nif (!isNaN(msg.payload.longitudeSW)) msg.payload.longitudeSW = String(msg.payload.longitudeSW);\n\n// Ensure boolean flags are textified for display\nif (msg.payload.positionAccurate!==undefined) msg.payload.positionAccurate = String(msg.payload.positionAccurate);\nif (msg.payload.raim!==undefined) msg.payload.raim = String(msg.payload.raim);\nif (msg.payload.retransmitted!==undefined) msg.payload.retransmitted = String(msg.payload.retransmitted);\nif (msg.payload.offPosition!==undefined) msg.payload.offPosition = String(msg.payload.offPosition);\nif (msg.payload.virtualAid!==undefined) msg.payload.virtualAid = String(msg.payload.virtualAid);\nif (msg.payload.assignedMode!==undefined) msg.payload.assignedMode = String(msg.payload.assignedMode);\nif (msg.payload.dte!==undefined) msg.payload.dte = String(msg.payload.dte);\nif (msg.payload.highPower!==undefined) msg.payload.highPower = String(msg.payload.highPower);\nif (msg.payload.channelAbw!==undefined) msg.payload.channelAbw = String(msg.payload.channelAbw);\nif (msg.payload.channelBbw!==undefined) msg.payload.channelBbw = String(msg.payload.channelBbw);\n\nmsg.payload.latlongNE = latLong(msg.payload.latitudeNE,msg.payload.longitudeNE);\nmsg.payload.latlongSW = latLong(msg.payload.latitudeSW,msg.payload.longitudeSW);\n\n// Turn arrays to text\nif (msg.payload.mmsi!==undefined) msg.payload.mmsi_text = tableFromArray(msg.payload.mmsi);\nif (msg.payload.offset!==undefined) msg.payload.offset_text = tableFromArray(msg.payload.offset);\nif (msg.payload.number!==undefined) msg.payload.number_text = tableFromArray(msg.payload.number);\nif (msg.payload.timeout!==undefined) msg.payload.timeout_text = tableFromArray(msg.payload.timeout);\nif (msg.payload.increment!==undefined) msg.payload.increment_text = tableFromArray(msg.payload.increment);\n\n// Ready for the mustache template\nreturn msg;\n\n// Functions\n\nfunction escapeHtml(s) {\n    var p = s.replace(/&/,\"&amp;\");\n    var r = p.replace(/</g,\"&lt;\");\n    return r.replace(/>/g,\"&gt;\");\n}\n\nfunction tableFromArray(a) {\n    if (a===undefined) return \"\";\n    var len = a.length;\n    var s = \"<table style=\\\"width:100%;border:0px;\\\"><tr>\";\n    var idx;\n    for (idx=0;idx<len;idx++) {\n        s += \"<td style=\\\"padding:0px;border:0px;width:25%;\\\">\"+a[idx]+\"</td>\";\n    }\n    s += \"</tr></table>\";\n    return s;\n}\n\nfunction latLong(lat,long) {\n    if (lat===undefined || long===undefined) return \"\";\n    var s = \"<table style=\\\"width:100%;border:0px;\\\"><tr>\";\n    s += \"<td style=\\\"padding:0px;border:0px;width:50%;\\\">Lat: \"+lat+\"</td>\";\n    s += \"<td style=\\\"padding:0px;border:0px;width:50%;\\\">Long: \"+long+\"</td>\";\n    s += \"</tr></table>\";\n    return s;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 420,
        "wires": [
            [
                "969b4057.05a828"
            ]
        ]
    },
    {
        "id": "c4def35b.f2c5d",
        "type": "function",
        "z": "f6755db8.da6748",
        "name": "Textify aisOriginalMessage",
        "func": "// Split original AIS message into separate lines using <br>\n\nmsg.originalAisMessage_text = \"\";\n\nif (msg.originalAisMessage !== undefined) {\n    for (var i=0;i<msg.originalAisMessage.length;i++) {\n        if (i>0) msg.originalAisMessage_text += \"<br>\";\n        msg.originalAisMessage_text += escapeHtml(msg.originalAisMessage[i]);\n    }\n}\n\nreturn msg;\n\nfunction escapeHtml(s) {\n    var p = s.replace(/&/,\"&amp;\");\n    var r = p.replace(/</g,\"&lt;\");\n    return r.replace(/>/g,\"&gt;\");\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 340,
        "wires": [
            [
                "a78766c5.f4b24"
            ]
        ]
    },
    {
        "id": "8ccddb9a.a55f38",
        "type": "inject",
        "z": "4540fc6b92d5bc8f",
        "name": "temperature",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "temperature",
        "payload": "10",
        "payloadType": "num",
        "x": 210,
        "y": 680,
        "wires": [
            [
                "47b769c5.cb0e28"
            ]
        ]
    },
    {
        "id": "47b769c5.cb0e28",
        "type": "join",
        "z": "4540fc6b92d5bc8f",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "3",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 710,
        "y": 720,
        "wires": [
            [
                "f9afb265.b11b7"
            ]
        ]
    },
    {
        "id": "f9afb265.b11b7",
        "type": "debug",
        "z": "4540fc6b92d5bc8f",
        "name": "payloadPayload",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 720,
        "wires": []
    },
    {
        "id": "d6fbe805.0e4628",
        "type": "inject",
        "z": "4540fc6b92d5bc8f",
        "name": "pressure",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "pressure",
        "payload": "999",
        "payloadType": "num",
        "x": 220,
        "y": 760,
        "wires": [
            [
                "47b769c5.cb0e28"
            ]
        ]
    },
    {
        "id": "f569c28c78dc628b",
        "type": "function",
        "z": "4540fc6b92d5bc8f",
        "name": "GPRMC Mesage",
        "func": "// Get the current value of the 'count' context property - default to 0\nvar count = flow.get(\"count\")||0;\n\nif (msg.topic === \"init\") {\n // set its value locally\n count = msg.payload;\n \n} else if (msg.topic === \"increment\")  {\n msg.topic = \"init\"\n count=count+1;\n} else if (msg.topic === \"decrement\")  {\n count--;\n}\n// Save the new value back to context so it will be available next time\nflow.set('count',count);\n\n// \n// Update the message payload and return - no need to create a new msg\n// msg.payload = \"$GPRMC,075128.000,A,\"+ count +\",N,00322.268,W,0.1,268.6,240921,0.0,E,A*10\";\n//msg.payload = \"$GPRMC,075128.000,A,5000.00,N,05000.00,W,0.1,268.6,240921,0.0,E,A*10\";\nmsg.payload = count\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 900,
        "wires": [
            [
                "47b769c5.cb0e28"
            ]
        ]
    },
    {
        "id": "131dce28b5a5851a",
        "type": "inject",
        "z": "4540fc6b92d5bc8f",
        "name": "Latitude BPXI = 4742.43",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "init",
        "payload": "5",
        "payloadType": "num",
        "x": 230,
        "y": 840,
        "wires": [
            [
                "f569c28c78dc628b"
            ]
        ]
    },
    {
        "id": "f8c89d1b31c6de04",
        "type": "inject",
        "z": "4540fc6b92d5bc8f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "10",
        "topic": "increment",
        "payloadType": "str",
        "x": 200,
        "y": 900,
        "wires": [
            [
                "f569c28c78dc628b"
            ]
        ]
    },
    {
        "id": "e9e52284d7adcf9d",
        "type": "inject",
        "z": "4540fc6b92d5bc8f",
        "name": "Timestamp",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 140,
        "y": 1080,
        "wires": [
            [
                "25ab12f68ebb987f"
            ]
        ]
    },
    {
        "id": "6f151a6bc330ce03",
        "type": "ais-decoder",
        "z": "4540fc6b92d5bc8f",
        "name": "AIS Decoding ",
        "x": 540,
        "y": 1140,
        "wires": [
            [
                "7b31b369617d051b",
                "9544124366ae3027"
            ]
        ]
    },
    {
        "id": "7b31b369617d051b",
        "type": "debug",
        "z": "4540fc6b92d5bc8f",
        "name": "AIS DECODER",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 1060,
        "wires": []
    },
    {
        "id": "522f0a3037230e50",
        "type": "comment",
        "z": "4540fc6b92d5bc8f",
        "name": "INCOMING AIS DATA",
        "info": "# AIS Message File Decoding\n# \nEdit the Sample File node to specify a file of AIS messages to process. Use the Filter node to pick out particular message types you are interested in. Click the button on the Timestamp node to initiate the decode.\n\nA large sample file of AIS messages can be found at the [AIS Hub](http://www.aishub.net/downloads/nmea-sample.zip).",
        "x": 140,
        "y": 1020,
        "wires": []
    },
    {
        "id": "25ab12f68ebb987f",
        "type": "function",
        "z": "4540fc6b92d5bc8f",
        "name": "AIVDM Message 1",
        "func": "msg.payload = \"!AIVDM,1,1,,B,177KQJ5000G?tO`K>RA1wUbN0TKH,0*5C\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 1080,
        "wires": [
            [
                "6f151a6bc330ce03"
            ]
        ]
    },
    {
        "id": "9544124366ae3027",
        "type": "function",
        "z": "4540fc6b92d5bc8f",
        "name": "Return Lat and Lon ",
        "func": "var AISReceived = msg.originalAisMessage[0];\n\n\nvar talkerId = msg.payload.talkerId\nvar sentenceId = msg.payload.sentenceId\n\n\nvar AISlongitude = msg.payload.longitude;\nvar AISlatitude = msg.payload.latitude;\n// msg.payload =\"Longitude:\" + longitude;\n\n// return msg;\nmsg.payload = {\n    SentenceType : talkerId + sentenceId,\n    Longitude: AISlongitude,\n    Latitude: AISlatitude,\n    FullSentence: AISReceived\n\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 1140,
        "wires": [
            [
                "f8bbdc59208ec84d",
                "ae21c04fb8a8d5be"
            ]
        ]
    },
    {
        "id": "f8bbdc59208ec84d",
        "type": "debug",
        "z": "4540fc6b92d5bc8f",
        "name": "AIS DICT",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 1140,
        "wires": []
    },
    {
        "id": "9618712c17e19bc9",
        "type": "function",
        "z": "4540fc6b92d5bc8f",
        "name": "GPRMC Mesage",
        "func": "// Get the current value of the 'count' context property - default to 0\nvar count = flow.get(\"count\")||0;\n\nif (msg.topic === \"init\") {\n // set its value locally\n count = msg.payload;\n \n} else if (msg.topic === \"increment\")  {\n count=count+1;\n} else if (msg.topic === \"decrement\")  {\n count--;\n}\n// Save the new value back to context so it will be available next time\nflow.set('count',count);\n\n// \n// Update the message payload and return - no need to create a new msg\n// msg.payload = \"$GPRMC,075128.000,A,\"+ count +\",N,00322.268,W,0.1,268.6,240921,0.0,E,A*10\";\n//msg.payload = \"$GPRMC,075128.000,A,5000.00,N,05000.00,W,0.1,268.6,240921,0.0,E,A*10\";\nmsg.payload = \"$GPRMC,165330.115,A,\"+ count + \",N,12220.625,W,,,230222,000.0,W*6E\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1380,
        "wires": [
            [
                "c0f7ca83c5bc6f25",
                "367d702b0ac28bf6",
                "c58a2f5d2c7d720f",
                "98b261a52e099024"
            ]
        ]
    },
    {
        "id": "b56a4b1aa6b1bc35",
        "type": "inject",
        "z": "4540fc6b92d5bc8f",
        "name": "Latitude BPXI = 4742.43",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "init",
        "payload": "4735.036",
        "payloadType": "num",
        "x": 170,
        "y": 1320,
        "wires": [
            [
                "9618712c17e19bc9"
            ]
        ]
    },
    {
        "id": "8d41b9295d3132bd",
        "type": "inject",
        "z": "4540fc6b92d5bc8f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "10",
        "topic": "increment",
        "payloadType": "str",
        "x": 120,
        "y": 1380,
        "wires": [
            [
                "9618712c17e19bc9"
            ]
        ]
    },
    {
        "id": "de706afabf899da5",
        "type": "inject",
        "z": "4540fc6b92d5bc8f",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "decrement",
        "payloadType": "str",
        "x": 120,
        "y": 1440,
        "wires": [
            [
                "9618712c17e19bc9"
            ]
        ]
    },
    {
        "id": "367d702b0ac28bf6",
        "type": "function",
        "z": "4540fc6b92d5bc8f",
        "name": "GPRMC Split",
        "func": "var str = msg.payload;\nvar parts = str.split(\",\");\n\nvar NorS = parts[4]\nvar WorE = parts[6]\n GPRMCLatitude = parseFloat(parts[3])\n GPRMCLongitude = parseFloat(parts[5])\n\nif (NorS == 'S') {\n    GPRMCLatitude = -GPRMCLatitude\n}\nelse {\n    GPRMCLatitude = GPRMCLatitude\n}\n\nif (WorE == 'W') {\n    GPRMCLongitude = -GPRMCLongitude\n}\nelse {\n    GPRMCLongitude = GPRMCLongitude\n}\n    \n\n\nmsg.payload = {\n  GPRMCLat: GPRMCLatitude,\n  GPRMCLon: GPRMCLongitude,\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 1460,
        "wires": [
            [
                "04bf8b90310b0c2a"
            ]
        ]
    },
    {
        "id": "04bf8b90310b0c2a",
        "type": "debug",
        "z": "4540fc6b92d5bc8f",
        "name": "Output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 830,
        "y": 1460,
        "wires": []
    },
    {
        "id": "ee04c6fb6228a948",
        "type": "join",
        "z": "4540fc6b92d5bc8f",
        "name": "",
        "mode": "custom",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "2",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1170,
        "y": 1300,
        "wires": [
            [
                "780813802fe1820a",
                "9c3ba3c54236c3df"
            ]
        ]
    },
    {
        "id": "49e2b5c151434e8f",
        "type": "debug",
        "z": "4540fc6b92d5bc8f",
        "name": "Joined",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1590,
        "y": 1360,
        "wires": []
    },
    {
        "id": "c0f7ca83c5bc6f25",
        "type": "function",
        "z": "4540fc6b92d5bc8f",
        "name": "GPRMC Split",
        "func": "var str = msg.payload;\nvar parts = str.split(\",\");\nmsg.payload = {\n  Timestamp: parts[1],\n  NavStatus: parts[2],\n  Latitude: parts[3],\n  NorS: parts[4],\n  Longitude: parts[5],\n  WorE: parts[6],\n  Speed: parts[7],\n  Course: parts[8],\n  Datestamp: parts[9],\n  Variation: parts[10]\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 1520,
        "wires": [
            [
                "e448aa95f7b07393"
            ]
        ]
    },
    {
        "id": "e448aa95f7b07393",
        "type": "debug",
        "z": "4540fc6b92d5bc8f",
        "name": "OutputFull",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 1520,
        "wires": []
    },
    {
        "id": "c58a2f5d2c7d720f",
        "type": "function",
        "z": "4540fc6b92d5bc8f",
        "name": "GPRMC Decoded Split",
        "func": "var str = msg.payload;\nvar parts = str.split(\",\");\n\nvar sentenceType = parts[0]\nvar NorS = parts[4]\nvar WorE = parts[6]\nvar GPRMCLatitude = parts[3]\nvar GPRMCLongitude = parts[5]\n                                 \n\n\nif (NorS == 'S') {\n    LatDir = -1\n}\nelse {\n    LatDir = 1\n}\n\n\nvar degreeLat = parseFloat(GPRMCLatitude.slice(0,2));                        \nvar minuteLat = parseFloat(GPRMCLatitude.slice(2));\nvar ddLat = LatDir*(degreeLat + (minuteLat/60))\nddLat = parseFloat(ddLat.toPrecision(5))    \n\n\nif (WorE == 'W') {\n    LonDir = -1\n}\nelse {\n    LonDir = 1\n}\n    \n\nvar degreeLon = parseFloat(GPRMCLongitude.slice(0,3));                        \nvar minuteLon = parseFloat(GPRMCLongitude.slice(3));\nvar ddLon = LonDir*(degreeLon + (minuteLon/60))\nddLon = parseFloat(ddLon.toPrecision(5))              \n\n\nmsg.payload = {\n  SentenceType : sentenceType,\n  Longitude: ddLon,\n  Latitude: ddLat,\n  FullSentence: str\n\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 1380,
        "wires": [
            [
                "1914e9c3b9ccad25",
                "9de3ce5c1fa92371"
            ]
        ]
    },
    {
        "id": "1914e9c3b9ccad25",
        "type": "debug",
        "z": "4540fc6b92d5bc8f",
        "name": "OutputDD",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 1320,
        "wires": []
    },
    {
        "id": "ae21c04fb8a8d5be",
        "type": "change",
        "z": "4540fc6b92d5bc8f",
        "name": "Topic = AIVDM",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "AIVDM",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 960,
        "y": 1200,
        "wires": [
            [
                "ee04c6fb6228a948"
            ]
        ]
    },
    {
        "id": "9de3ce5c1fa92371",
        "type": "change",
        "z": "4540fc6b92d5bc8f",
        "name": "Topic = GPRMC",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "GPRMC",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 960,
        "y": 1380,
        "wires": [
            [
                "ee04c6fb6228a948"
            ]
        ]
    },
    {
        "id": "780813802fe1820a",
        "type": "debug",
        "z": "4540fc6b92d5bc8f",
        "name": "PAYLOAD",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1370,
        "y": 1360,
        "wires": []
    },
    {
        "id": "bf620993d3c65211",
        "type": "comment",
        "z": "4540fc6b92d5bc8f",
        "name": "INCOMING GPRMC DATA",
        "info": "",
        "x": 150,
        "y": 1260,
        "wires": []
    },
    {
        "id": "c7e06d3ae2625565",
        "type": "function",
        "z": "4540fc6b92d5bc8f",
        "name": "AIVDM Message 2",
        "func": "msg.payload = \"!AIVDM,1,1,,B,13PRrB0000OvbS@NhA9=oPbr0<0u,0*58\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 1120,
        "wires": [
            [
                "6f151a6bc330ce03"
            ]
        ]
    },
    {
        "id": "f7c9da0821316460",
        "type": "inject",
        "z": "4540fc6b92d5bc8f",
        "name": "Timestamp",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 140,
        "y": 1120,
        "wires": [
            [
                "c7e06d3ae2625565"
            ]
        ]
    },
    {
        "id": "9c3ba3c54236c3df",
        "type": "function",
        "z": "4540fc6b92d5bc8f",
        "name": "GPRMC Decoded Split",
        "func": "// Extracting the info from the joined data\n\nvar objectAIVDM = msg.payload.AIVDM;\nvar latAIVDM = objectAIVDM[\"Latitude\"];\nvar lonAIVDM = objectAIVDM[\"Longitude\"];\nvar fullSentenceAIVDM = objectAIVDM[\"FullSentence\"];\n\nvar objectGPRMC = msg.payload.GPRMC;\nvar latGPRMC = objectGPRMC[\"Latitude\"];\nvar lonGPRMC = objectGPRMC[\"Longitude\"];\nvar fullSentenceGPRMC = objectGPRMC[\"FullSentence\"];\n\n// msg.payload = \"AIVDM\" + latAIVDM + \"GPRMC\" + latGPRMC\n\n// Finding the distance between the BPXI and the retrieved AIS data\n\nlet R = 6371e3; // metres\nlet Theta1 = latAIVDM * Math.PI/180; //# φ, λ in radians\nlet Theta2 = latGPRMC * Math.PI/180;\nlet deltaTheta = (latGPRMC-latAIVDM) * Math.PI/180;\nlet deltaLambda = (lonGPRMC-lonAIVDM) * Math.PI/180;\n\nlet a = Math.sin(deltaTheta/2) * Math.sin(deltaTheta/2) + Math.cos(Theta1) * Math.cos(Theta2) *Math.sin(deltaLambda/2) * Math.sin(deltaLambda/2);\nlet c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\nlet d = (R * c)/1852;\n\n// d = parseFloat(d.toPrecision(7))    \n// msg.payload = d;\n// return msg;\n\nif (d >= 1000){\n    msg.payload = fullSentenceAIVDM;\n    return msg;\n}\nelse {\n    // Equicvalent to \"do nothing\" or pass in Python \n    // msg.payload = \"not in boundary\"\n    // return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 1300,
        "wires": [
            [
                "49e2b5c151434e8f",
                "59e94615c7a85963"
            ]
        ]
    },
    {
        "id": "6a3a6e05fdaa1c0c",
        "type": "udp out",
        "z": "4540fc6b92d5bc8f",
        "name": "UDP AIVDM",
        "addr": "",
        "iface": "",
        "port": "",
        "ipv": "udp4",
        "outport": "",
        "base64": false,
        "multicast": "false",
        "x": 1590,
        "y": 1220,
        "wires": []
    },
    {
        "id": "59e94615c7a85963",
        "type": "function",
        "z": "4540fc6b92d5bc8f",
        "name": "Computer's IP and UDP",
        "func": "for (i = 1218; i < 1222; i++){\n    msg.port = i;\n    msg.ip = \"192.168.1.149\";\n    node.send(msg)\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 1220,
        "wires": [
            [
                "6a3a6e05fdaa1c0c"
            ]
        ]
    },
    {
        "id": "f8584f817bbdb7e7",
        "type": "function",
        "z": "4540fc6b92d5bc8f",
        "name": "AIVDM Message 3",
        "func": "msg.payload = \"!AIVDM,1,1,,A,13HOHfP000OhU@NKCw1=MJh6082L,0*4D\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 1160,
        "wires": [
            [
                "6f151a6bc330ce03"
            ]
        ]
    },
    {
        "id": "511c3fee4007704e",
        "type": "inject",
        "z": "4540fc6b92d5bc8f",
        "name": "Timestamp",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 140,
        "y": 1160,
        "wires": [
            [
                "f8584f817bbdb7e7"
            ]
        ]
    },
    {
        "id": "005c37767e8cac6b",
        "type": "function",
        "z": "4540fc6b92d5bc8f",
        "name": "AIVDM Message 4",
        "func": "msg.payload = \"!AIVDM,1,1,,A,33P;3`U000OhU2>KD1LcbjwpRP00,0*19\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 1200,
        "wires": [
            [
                "6f151a6bc330ce03"
            ]
        ]
    },
    {
        "id": "38b03a7803741547",
        "type": "inject",
        "z": "4540fc6b92d5bc8f",
        "name": "Timestamp",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 140,
        "y": 1200,
        "wires": [
            [
                "005c37767e8cac6b"
            ]
        ]
    },
    {
        "id": "98b261a52e099024",
        "type": "function",
        "z": "4540fc6b92d5bc8f",
        "name": "Computer's IP and UDP",
        "func": "for (i = 1210; i < 1217; i++){\n    msg.port = i;\n    msg.ip = \"192.168.1.149\";\n    node.send(msg)\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 1580,
        "wires": [
            [
                "23cf5e136def0066"
            ]
        ]
    },
    {
        "id": "23cf5e136def0066",
        "type": "udp out",
        "z": "4540fc6b92d5bc8f",
        "name": "UDP GPRMC",
        "addr": "",
        "iface": "",
        "port": "",
        "ipv": "udp4",
        "outport": "",
        "base64": false,
        "multicast": "false",
        "x": 940,
        "y": 1580,
        "wires": []
    },
    {
        "id": "cb16d6f3e46c3e75",
        "type": "function",
        "z": "73b0418053a0d6b8",
        "name": "GPRMC Mesage",
        "func": "// Get the current value of the 'count' context property - default to 0\nvar count = flow.get(\"count\")||0;\n\nif (msg.topic === \"init\") {\n // set its value locally\n count = msg.payload;\n \n} else if (msg.topic === \"increment\")  {\n count=count+1;\n} else if (msg.topic === \"decrement\")  {\n count--;\n}\n// Save the new value back to context so it will be available next time\nflow.set('count',count);\n\n// \n// Update the message payload and return - no need to create a new msg\nmsg.payload = \"$GPRMC,075128.000,A,\"+ count +\",N,00322.268,W,0.1,268.6,240921,0.0,E,A*10\";\n//msg.payload = \"$GPRMC,075128.000,A,5000.00,N,05000.00,W,0.1,268.6,240921,0.0,E,A*10\";\n// msg.payload = \"$GPRMC,165330.115,A,\"+ count + \",N,12220.625,W,,,230222,000.0,W*6E\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 380,
        "wires": [
            [
                "0968412202f90eb7"
            ]
        ]
    },
    {
        "id": "cfc30620b8cb20dd",
        "type": "inject",
        "z": "73b0418053a0d6b8",
        "name": "Latitude BPXI = 4742.43",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "init",
        "payload": "4742.43",
        "payloadType": "num",
        "x": 230,
        "y": 320,
        "wires": [
            [
                "cb16d6f3e46c3e75"
            ]
        ]
    },
    {
        "id": "d61f5994bb557017",
        "type": "inject",
        "z": "73b0418053a0d6b8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "10",
        "topic": "increment",
        "payloadType": "str",
        "x": 180,
        "y": 380,
        "wires": [
            [
                "cb16d6f3e46c3e75"
            ]
        ]
    },
    {
        "id": "1adb8d1244836869",
        "type": "inject",
        "z": "73b0418053a0d6b8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "decrement",
        "payloadType": "str",
        "x": 180,
        "y": 440,
        "wires": [
            [
                "cb16d6f3e46c3e75"
            ]
        ]
    },
    {
        "id": "0968412202f90eb7",
        "type": "function",
        "z": "73b0418053a0d6b8",
        "name": "Computer's IP and UDP",
        "func": "msg.port = 504;\nmsg.ip = \"192.168.1.149\";\nnode.send(msg)\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 380,
        "wires": [
            [
                "bbf48b9c80810877"
            ]
        ]
    },
    {
        "id": "bbf48b9c80810877",
        "type": "udp out",
        "z": "73b0418053a0d6b8",
        "name": "UDP GPRMC",
        "addr": "",
        "iface": "",
        "port": "",
        "ipv": "udp4",
        "outport": "",
        "base64": false,
        "multicast": "false",
        "x": 1020,
        "y": 380,
        "wires": []
    },
    {
        "id": "b75a16463127eff1",
        "type": "inject",
        "z": "bfb33fbf22a9ec29",
        "name": "Timestamp",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 100,
        "y": 300,
        "wires": [
            [
                "7f5a390302bbe241"
            ]
        ]
    },
    {
        "id": "e6bb35fdf29d6779",
        "type": "ais-decoder",
        "z": "bfb33fbf22a9ec29",
        "name": "AIS Decoding ",
        "x": 500,
        "y": 300,
        "wires": [
            [
                "4c3b867f1454415d",
                "dc794270d82b9852"
            ]
        ]
    },
    {
        "id": "4c3b867f1454415d",
        "type": "debug",
        "z": "bfb33fbf22a9ec29",
        "name": "AIS DECODER",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 220,
        "wires": []
    },
    {
        "id": "a027edeeb1ec4e9e",
        "type": "comment",
        "z": "bfb33fbf22a9ec29",
        "name": "INCOMING AIS DATA",
        "info": "# AIS Message File Decoding\n# \nEdit the Sample File node to specify a file of AIS messages to process. Use the Filter node to pick out particular message types you are interested in. Click the button on the Timestamp node to initiate the decode.\n\nA large sample file of AIS messages can be found at the [AIS Hub](http://www.aishub.net/downloads/nmea-sample.zip).",
        "x": 120,
        "y": 240,
        "wires": []
    },
    {
        "id": "7f5a390302bbe241",
        "type": "function",
        "z": "bfb33fbf22a9ec29",
        "name": "AIVDM Message 1",
        "func": "msg.payload = \"!AIVDM,1,1,,B,177KQJ5000G?tO`K>RA1wUbN0TKH,0*5C\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 300,
        "wires": [
            [
                "e6bb35fdf29d6779"
            ]
        ]
    },
    {
        "id": "dc794270d82b9852",
        "type": "function",
        "z": "bfb33fbf22a9ec29",
        "name": "Return Lat and Lon ",
        "func": "var AISReceived = msg.originalAisMessage[0];\n\n\nvar talkerId = msg.payload.talkerId\nvar sentenceId = msg.payload.sentenceId\n\n\nvar AISlongitude = msg.payload.longitude;\nvar AISlatitude = msg.payload.latitude;\n// msg.payload =\"Longitude:\" + longitude;\n\n// return msg;\nmsg.payload = {\n    SentenceType : talkerId + sentenceId,\n    Longitude: AISlongitude,\n    Latitude: AISlatitude,\n    FullSentence: AISReceived\n\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 300,
        "wires": [
            [
                "d28d424234cff29c",
                "db52726730f5f5ea"
            ]
        ]
    },
    {
        "id": "d28d424234cff29c",
        "type": "debug",
        "z": "bfb33fbf22a9ec29",
        "name": "AIS DICT",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 300,
        "wires": []
    },
    {
        "id": "6a77a7e2ef7e96a7",
        "type": "function",
        "z": "bfb33fbf22a9ec29",
        "name": "Measure Distance in nm",
        "func": "let lat1 = 47.634;\nlet lat2 = 47.582833;\nlet lon1 = -122.34;\nlet lon2 = -122.3458 ;\n\nlet R = 6371e3; // metres\nlet Theta1 = lat1 * Math.PI/180; //# φ, λ in radians\nlet Theta2 = lat2 * Math.PI/180;\nlet deltaTheta = (lat2-lat1) * Math.PI/180;\nlet deltaLambda = (lon2-lon1) * Math.PI/180;\n\nlet a = Math.sin(deltaTheta/2) * Math.sin(deltaTheta/2) + Math.cos(Theta1) * Math.cos(Theta2) *Math.sin(deltaLambda/2) * Math.sin(deltaLambda/2);\nlet c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\nlet d = (R * c)/1852;\nmsg.payload = d;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 1540,
        "wires": [
            [
                "648741c49e43022c"
            ]
        ]
    },
    {
        "id": "4bc6822d5ef99d86",
        "type": "inject",
        "z": "bfb33fbf22a9ec29",
        "name": "Timestamp",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 160,
        "y": 1540,
        "wires": [
            [
                "6a77a7e2ef7e96a7"
            ]
        ]
    },
    {
        "id": "648741c49e43022c",
        "type": "debug",
        "z": "bfb33fbf22a9ec29",
        "name": "TEST DISTANCE",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 1540,
        "wires": []
    },
    {
        "id": "7d9e224755551c3f",
        "type": "function",
        "z": "bfb33fbf22a9ec29",
        "name": "GPRMC Mesage",
        "func": "// Get the current value of the 'count' context property - default to 0\nvar count = flow.get(\"count\")||0;\n\nif (msg.topic === \"init\") {\n // set its value locally\n count = msg.payload;\n \n} else if (msg.topic === \"increment\")  {\n count=count+1;\n} else if (msg.topic === \"decrement\")  {\n count--;\n}\n// Save the new value back to context so it will be available next time\nflow.set('count',count);\n\n// \n// Update the message payload and return - no need to create a new msg\n// msg.payload = \"$GPRMC,075128.000,A,\"+ count +\",N,00322.268,W,0.1,268.6,240921,0.0,E,A*10\";\n//msg.payload = \"$GPRMC,075128.000,A,5000.00,N,05000.00,W,0.1,268.6,240921,0.0,E,A*10\";\nmsg.payload = \"$GPRMC,165330.115,A,\"+ count + \",N,12220.625,W,,,230222,000.0,W*6E\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 640,
        "wires": [
            [
                "fe165d32a96a1227",
                "83535cbaebd57cea",
                "b838b6f381423221"
            ]
        ]
    },
    {
        "id": "786ca5fdce0348e8",
        "type": "inject",
        "z": "bfb33fbf22a9ec29",
        "name": "Latitude BPXI = 4742.43",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "init",
        "payload": "4735.036",
        "payloadType": "num",
        "x": 150,
        "y": 580,
        "wires": [
            [
                "7d9e224755551c3f"
            ]
        ]
    },
    {
        "id": "efa2100772349a45",
        "type": "inject",
        "z": "bfb33fbf22a9ec29",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "10",
        "topic": "increment",
        "payloadType": "str",
        "x": 120,
        "y": 640,
        "wires": [
            [
                "7d9e224755551c3f"
            ]
        ]
    },
    {
        "id": "d4c7ebe91985de62",
        "type": "inject",
        "z": "bfb33fbf22a9ec29",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "decrement",
        "payloadType": "str",
        "x": 120,
        "y": 700,
        "wires": [
            [
                "7d9e224755551c3f"
            ]
        ]
    },
    {
        "id": "83535cbaebd57cea",
        "type": "function",
        "z": "bfb33fbf22a9ec29",
        "name": "GPRMC Split",
        "func": "var str = msg.payload;\nvar parts = str.split(\",\");\n\nvar NorS = parts[4]\nvar WorE = parts[6]\n GPRMCLatitude = parseFloat(parts[3])\n GPRMCLongitude = parseFloat(parts[5])\n\nif (NorS == 'S') {\n    GPRMCLatitude = -GPRMCLatitude\n}\nelse {\n    GPRMCLatitude = GPRMCLatitude\n}\n\nif (WorE == 'W') {\n    GPRMCLongitude = -GPRMCLongitude\n}\nelse {\n    GPRMCLongitude = GPRMCLongitude\n}\n    \n\n\nmsg.payload = {\n  GPRMCLat: GPRMCLatitude,\n  GPRMCLon: GPRMCLongitude,\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 720,
        "wires": [
            [
                "7289a968fed2f2c0"
            ]
        ]
    },
    {
        "id": "7289a968fed2f2c0",
        "type": "debug",
        "z": "bfb33fbf22a9ec29",
        "name": "Output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 720,
        "wires": []
    },
    {
        "id": "15d5f1845caea7a4",
        "type": "join",
        "z": "bfb33fbf22a9ec29",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1170,
        "y": 680,
        "wires": [
            [
                "4eee4c4effe724ea",
                "db367a69250d5030"
            ]
        ]
    },
    {
        "id": "e083bf5c92501dac",
        "type": "debug",
        "z": "bfb33fbf22a9ec29",
        "name": "Joined",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1690,
        "y": 600,
        "wires": []
    },
    {
        "id": "4269bc939baff128",
        "type": "batch",
        "z": "bfb33fbf22a9ec29",
        "name": "",
        "mode": "count",
        "count": "2",
        "overlap": "1",
        "interval": 10,
        "allowEmptySequence": false,
        "topics": [],
        "x": 1090,
        "y": 600,
        "wires": [
            [
                "15d5f1845caea7a4"
            ]
        ]
    },
    {
        "id": "fe165d32a96a1227",
        "type": "function",
        "z": "bfb33fbf22a9ec29",
        "name": "GPRMC Split",
        "func": "var str = msg.payload;\nvar parts = str.split(\",\");\nmsg.payload = {\n  Timestamp: parts[1],\n  NavStatus: parts[2],\n  Latitude: parts[3],\n  NorS: parts[4],\n  Longitude: parts[5],\n  WorE: parts[6],\n  Speed: parts[7],\n  Course: parts[8],\n  Datestamp: parts[9],\n  Variation: parts[10]\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 780,
        "wires": [
            [
                "f70da7ef9928f83d"
            ]
        ]
    },
    {
        "id": "f70da7ef9928f83d",
        "type": "debug",
        "z": "bfb33fbf22a9ec29",
        "name": "OutputFull",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 780,
        "wires": []
    },
    {
        "id": "b838b6f381423221",
        "type": "function",
        "z": "bfb33fbf22a9ec29",
        "name": "GPRMC Decoded Split",
        "func": "var str = msg.payload;\nvar parts = str.split(\",\");\n\nvar sentenceType = parts[0]\nvar NorS = parts[4]\nvar WorE = parts[6]\nvar GPRMCLatitude = parts[3]\nvar GPRMCLongitude = parts[5]\n                                 \n\n\nif (NorS == 'S') {\n    LatDir = -1\n}\nelse {\n    LatDir = 1\n}\n\n\nvar degreeLat = parseFloat(GPRMCLatitude.slice(0,2));                        \nvar minuteLat = parseFloat(GPRMCLatitude.slice(2));\nvar ddLat = LatDir*(degreeLat + (minuteLat/60))\nddLat = parseFloat(ddLat.toPrecision(5))    \n\n\nif (WorE == 'W') {\n    LonDir = -1\n}\nelse {\n    LonDir = 1\n}\n    \n\nvar degreeLon = parseFloat(GPRMCLongitude.slice(0,3));                        \nvar minuteLon = parseFloat(GPRMCLongitude.slice(3));\nvar ddLon = LonDir*(degreeLon + (minuteLon/60))\nddLon = parseFloat(ddLon.toPrecision(5))              \n\n\nmsg.payload = {\n  SentenceType : sentenceType,\n  Longitude: ddLon,\n  Latitude: ddLat,\n  FullSentence: str\n\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 640,
        "wires": [
            [
                "7d072a4c34647bc1",
                "41034e7f1077f401"
            ]
        ]
    },
    {
        "id": "7d072a4c34647bc1",
        "type": "debug",
        "z": "bfb33fbf22a9ec29",
        "name": "OutputDD",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 580,
        "wires": []
    },
    {
        "id": "6260e2679aad9a91",
        "type": "rbe",
        "z": "bfb33fbf22a9ec29",
        "name": "",
        "func": "rbei",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "topic",
        "topi": "topic",
        "x": 1030,
        "y": 520,
        "wires": [
            [
                "4269bc939baff128",
                "a0a4608f3599f489"
            ]
        ]
    },
    {
        "id": "db52726730f5f5ea",
        "type": "change",
        "z": "bfb33fbf22a9ec29",
        "name": "Topic←POS",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "POS",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 930,
        "y": 360,
        "wires": [
            [
                "6260e2679aad9a91"
            ]
        ]
    },
    {
        "id": "41034e7f1077f401",
        "type": "change",
        "z": "bfb33fbf22a9ec29",
        "name": "Topic←NEG",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "NEG",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 810,
        "y": 640,
        "wires": [
            [
                "6260e2679aad9a91"
            ]
        ]
    },
    {
        "id": "a0a4608f3599f489",
        "type": "debug",
        "z": "bfb33fbf22a9ec29",
        "name": "msgTopic",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1160,
        "y": 440,
        "wires": []
    },
    {
        "id": "4eee4c4effe724ea",
        "type": "function",
        "z": "bfb33fbf22a9ec29",
        "name": "GPRMC Decoded Split",
        "func": "// Extracting the info from the joined data\n\nvar arrayZero = msg.payload[0];\nvar arrayOne = msg.payload[1];\n\nvar arrayZeroType = arrayZero.SentenceType;\nvar arrayOneType = arrayOne.SentenceType;\n\n\nif (arrayZeroType == \"AIVDM\"){\n    AISLon = arrayZero.Longitude\n    AISLat = arrayZero.Latitude\n    AISFullSentence = arrayZero.FullSentence\n    GPRMCLon = arrayOne.Longitude\n    GPRMCLat = arrayOne.Latitude\n}\nelse {\n    AISLon = arrayOne.Longitude\n    AISLat = arrayOne.Latitude\n    AISFullSentence = arrayOne.FullSentence\n    GPRMCLon = arrayZero.Longitude\n    GPRMCLat = arrayZero.Latitude\n}\n\n// Finding the distance between the BPXI and the retrieved AIS data\n\nlet R = 6371e3; // metres\nlet Theta1 = AISLat * Math.PI/180; //# φ, λ in radians\nlet Theta2 = GPRMCLat * Math.PI/180;\nlet deltaTheta = (GPRMCLat-AISLat) * Math.PI/180;\nlet deltaLambda = (GPRMCLon-AISLon) * Math.PI/180;\n\nlet a = Math.sin(deltaTheta/2) * Math.sin(deltaTheta/2) + Math.cos(Theta1) * Math.cos(Theta2) *Math.sin(deltaLambda/2) * Math.sin(deltaLambda/2);\nlet c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\nlet d = (R * c)/1852;\n\nd = parseFloat(d.toPrecision(7))    \n\nmsg.payload = d;\n\nreturn msg;\n\n// if (msg.payload <= 1000){\n//     return msg;\n// }\n// else {\n//     msg.payload = \"not in boundary\"\n//     return msg;\n// }\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 600,
        "wires": [
            [
                "e083bf5c92501dac"
            ]
        ]
    },
    {
        "id": "db367a69250d5030",
        "type": "debug",
        "z": "bfb33fbf22a9ec29",
        "name": "PAYLOAD",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1330,
        "y": 760,
        "wires": []
    },
    {
        "id": "dad99577b39774dd",
        "type": "comment",
        "z": "bfb33fbf22a9ec29",
        "name": "INCOMING GPRMC DATA",
        "info": "",
        "x": 130,
        "y": 520,
        "wires": []
    },
    {
        "id": "7890b618b3504c90",
        "type": "trigger",
        "z": "bfb33fbf22a9ec29",
        "name": "",
        "op1": "",
        "op2": "",
        "op1type": "pay",
        "op2type": "payl",
        "duration": "0",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 860,
        "y": 1160,
        "wires": [
            [
                "466aeb777d87e107"
            ]
        ]
    },
    {
        "id": "1196a66132449c49",
        "type": "inject",
        "z": "bfb33fbf22a9ec29",
        "name": "Sending",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "2",
        "crontab": "",
        "once": true,
        "onceDelay": "4",
        "topic": "increment",
        "payloadType": "str",
        "x": 200,
        "y": 1040,
        "wires": [
            [
                "a2bd88ff329f83c2"
            ]
        ]
    },
    {
        "id": "1f57edc7bee49dd8",
        "type": "inject",
        "z": "bfb33fbf22a9ec29",
        "name": "Reset the message",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "str",
        "x": 310,
        "y": 1200,
        "wires": [
            [
                "70b2776cc44e1367"
            ]
        ]
    },
    {
        "id": "70b2776cc44e1367",
        "type": "function",
        "z": "bfb33fbf22a9ec29",
        "name": "Reset Function ",
        "func": "if (msg.payload == 1){\n    msg.reset = 1\n}\nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 1200,
        "wires": [
            [
                "7890b618b3504c90"
            ]
        ]
    },
    {
        "id": "466aeb777d87e107",
        "type": "debug",
        "z": "bfb33fbf22a9ec29",
        "name": "TEST RESET",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 1160,
        "wires": []
    },
    {
        "id": "a2bd88ff329f83c2",
        "type": "function",
        "z": "bfb33fbf22a9ec29",
        "name": "GPRMC Mesage",
        "func": "if (msg.topic === \"init\") {\n // set its value locally\n count = msg.payload;\n \n} else if (msg.topic === \"increment\")  {\n count=count+1;\n}\n\nmsg.payload = count ;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1100,
        "wires": [
            [
                "7890b618b3504c90",
                "1681770ee101fe52"
            ]
        ]
    },
    {
        "id": "1681770ee101fe52",
        "type": "debug",
        "z": "bfb33fbf22a9ec29",
        "name": "TEST COUNT",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 1000,
        "wires": []
    },
    {
        "id": "429fb7dfed2680e0",
        "type": "inject",
        "z": "bfb33fbf22a9ec29",
        "name": "count = 1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "init",
        "payload": "1",
        "payloadType": "num",
        "x": 220,
        "y": 980,
        "wires": [
            [
                "a2bd88ff329f83c2"
            ]
        ]
    },
    {
        "id": "6de2ea94993e0c14",
        "type": "function",
        "z": "bfb33fbf22a9ec29",
        "name": "AIVDM Message 2",
        "func": "msg.payload = \"!AIVDM,1,1,,B,13PRrB0000OvbS@NhA9=oPbr0<0u,0*58\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 380,
        "wires": [
            [
                "e6bb35fdf29d6779"
            ]
        ]
    },
    {
        "id": "4f4c0ad6169b388d",
        "type": "inject",
        "z": "bfb33fbf22a9ec29",
        "name": "Timestamp",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 100,
        "y": 380,
        "wires": [
            [
                "6de2ea94993e0c14"
            ]
        ]
    },
    {
        "id": "04e0df5f95b3e55c",
        "type": "inject",
        "z": "3a7412efe0b5441b",
        "name": "Timestamp",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 140,
        "y": 240,
        "wires": [
            [
                "b3b80746b85d69e3"
            ]
        ]
    },
    {
        "id": "0b6f0443bb7ba91d",
        "type": "ais-decoder",
        "z": "3a7412efe0b5441b",
        "name": "AIS Decoding ",
        "x": 540,
        "y": 240,
        "wires": [
            [
                "7145f8a5e2b8ab60",
                "e218370d406d247b"
            ]
        ]
    },
    {
        "id": "7145f8a5e2b8ab60",
        "type": "debug",
        "z": "3a7412efe0b5441b",
        "name": "AIS DECODER",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 160,
        "wires": []
    },
    {
        "id": "2f70265a6e45b947",
        "type": "comment",
        "z": "3a7412efe0b5441b",
        "name": "INCOMING AIS DATA",
        "info": "# AIS Message File Decoding\n# \nEdit the Sample File node to specify a file of AIS messages to process. Use the Filter node to pick out particular message types you are interested in. Click the button on the Timestamp node to initiate the decode.\n\nA large sample file of AIS messages can be found at the [AIS Hub](http://www.aishub.net/downloads/nmea-sample.zip).",
        "x": 160,
        "y": 180,
        "wires": []
    },
    {
        "id": "b3b80746b85d69e3",
        "type": "function",
        "z": "3a7412efe0b5441b",
        "name": "AIVDM Message",
        "func": "msg.payload = \"!AIVDM,1,1,,B,177KQJ5000G?tO`K>RA1wUbN0TKH,0*5C\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 240,
        "wires": [
            [
                "0b6f0443bb7ba91d"
            ]
        ]
    },
    {
        "id": "e218370d406d247b",
        "type": "function",
        "z": "3a7412efe0b5441b",
        "name": "Return Lat and Lon ",
        "func": "var AISReceived = msg.originalAisMessage[0];\n\n\nvar talkerId = msg.payload.talkerId\nvar sentenceId = msg.payload.sentenceId\n\n\nvar AISlongitude = msg.payload.longitude;\nvar AISlatitude = msg.payload.latitude;\n// msg.payload =\"Longitude:\" + longitude;\n\n// return msg;\nmsg.payload = {\n    SentenceType : talkerId + sentenceId,\n    Longitude: AISlongitude,\n    Latitude: AISlatitude,\n    FullSentence: AISReceived\n\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 240,
        "wires": [
            [
                "2562abce25e1e201",
                "3d45a041c5cf835c"
            ]
        ]
    },
    {
        "id": "2562abce25e1e201",
        "type": "debug",
        "z": "3a7412efe0b5441b",
        "name": "AIS DICT",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 240,
        "wires": []
    },
    {
        "id": "8f4cf8ea490d390e",
        "type": "function",
        "z": "3a7412efe0b5441b",
        "name": "GPRMC Mesage",
        "func": "// Get the current value of the 'count' context property - default to 0\nvar count = flow.get(\"count\")||0;\n\nif (msg.topic === \"init\") {\n // set its value locally\n count = msg.payload;\n \n} else if (msg.topic === \"increment\")  {\n count=count+1;\n} else if (msg.topic === \"decrement\")  {\n count--;\n}\n// Save the new value back to context so it will be available next time\nflow.set('count',count);\n\n// \n// Update the message payload and return - no need to create a new msg\n// msg.payload = \"$GPRMC,075128.000,A,\"+ count +\",N,00322.268,W,0.1,268.6,240921,0.0,E,A*10\";\n//msg.payload = \"$GPRMC,075128.000,A,5000.00,N,05000.00,W,0.1,268.6,240921,0.0,E,A*10\";\nmsg.payload = \"$GPRMC,165330.115,A,\"+ count + \",N,12220.625,W,,,230222,000.0,W*6E\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 580,
        "wires": [
            [
                "dcf6a2a22c8e8f54",
                "9147946f8e2c243a",
                "e8c05bd8bf9454ee"
            ]
        ]
    },
    {
        "id": "40d87a857a253c73",
        "type": "inject",
        "z": "3a7412efe0b5441b",
        "name": "Latitude BPXI = 4742.43",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "2",
        "topic": "init",
        "payload": "4735.036",
        "payloadType": "num",
        "x": 190,
        "y": 520,
        "wires": [
            [
                "8f4cf8ea490d390e"
            ]
        ]
    },
    {
        "id": "4fe3fb0e50661605",
        "type": "inject",
        "z": "3a7412efe0b5441b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "10",
        "topic": "increment",
        "payloadType": "str",
        "x": 160,
        "y": 580,
        "wires": [
            [
                "8f4cf8ea490d390e"
            ]
        ]
    },
    {
        "id": "a21859d8d404ad1c",
        "type": "inject",
        "z": "3a7412efe0b5441b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "decrement",
        "payloadType": "str",
        "x": 160,
        "y": 640,
        "wires": [
            [
                "8f4cf8ea490d390e"
            ]
        ]
    },
    {
        "id": "9147946f8e2c243a",
        "type": "function",
        "z": "3a7412efe0b5441b",
        "name": "GPRMC Split",
        "func": "var str = msg.payload;\nvar parts = str.split(\",\");\n\nvar NorS = parts[4]\nvar WorE = parts[6]\n GPRMCLatitude = parseFloat(parts[3])\n GPRMCLongitude = parseFloat(parts[5])\n\nif (NorS == 'S') {\n    GPRMCLatitude = -GPRMCLatitude\n}\nelse {\n    GPRMCLatitude = GPRMCLatitude\n}\n\nif (WorE == 'W') {\n    GPRMCLongitude = -GPRMCLongitude\n}\nelse {\n    GPRMCLongitude = GPRMCLongitude\n}\n    \n\n\nmsg.payload = {\n  GPRMCLat: GPRMCLatitude,\n  GPRMCLon: GPRMCLongitude,\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 660,
        "wires": [
            [
                "5eb5d9ecba4a9295"
            ]
        ]
    },
    {
        "id": "5eb5d9ecba4a9295",
        "type": "debug",
        "z": "3a7412efe0b5441b",
        "name": "Output",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 660,
        "wires": []
    },
    {
        "id": "8e3df2d27a4eeb68",
        "type": "join",
        "z": "3a7412efe0b5441b",
        "name": "",
        "mode": "custom",
        "build": "array",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1630,
        "y": 460,
        "wires": [
            [
                "c83562b9c4878d1f",
                "e73087a6c8305aec"
            ]
        ]
    },
    {
        "id": "1fc3a1d283451d70",
        "type": "debug",
        "z": "3a7412efe0b5441b",
        "name": "Joined",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2370,
        "y": 460,
        "wires": []
    },
    {
        "id": "d12fcac192520dc8",
        "type": "batch",
        "z": "3a7412efe0b5441b",
        "name": "",
        "mode": "count",
        "count": "2",
        "overlap": "0",
        "interval": 10,
        "allowEmptySequence": false,
        "topics": [],
        "x": 1470,
        "y": 460,
        "wires": [
            [
                "8e3df2d27a4eeb68"
            ]
        ]
    },
    {
        "id": "dcf6a2a22c8e8f54",
        "type": "function",
        "z": "3a7412efe0b5441b",
        "name": "GPRMC Split",
        "func": "var str = msg.payload;\nvar parts = str.split(\",\");\nmsg.payload = {\n  Timestamp: parts[1],\n  NavStatus: parts[2],\n  Latitude: parts[3],\n  NorS: parts[4],\n  Longitude: parts[5],\n  WorE: parts[6],\n  Speed: parts[7],\n  Course: parts[8],\n  Datestamp: parts[9],\n  Variation: parts[10]\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 720,
        "wires": [
            [
                "f0f729fbdf400c49"
            ]
        ]
    },
    {
        "id": "f0f729fbdf400c49",
        "type": "debug",
        "z": "3a7412efe0b5441b",
        "name": "OutputFull",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 720,
        "wires": []
    },
    {
        "id": "e8c05bd8bf9454ee",
        "type": "function",
        "z": "3a7412efe0b5441b",
        "name": "GPRMC Decoded Split",
        "func": "var str = msg.payload;\nvar parts = str.split(\",\");\n\nvar sentenceType = parts[0]\nvar NorS = parts[4]\nvar WorE = parts[6]\nvar GPRMCLatitude = parts[3]\nvar GPRMCLongitude = parts[5]\n                                 \n\n\nif (NorS == 'S') {\n    LatDir = -1\n}\nelse {\n    LatDir = 1\n}\n\n\nvar degreeLat = parseFloat(GPRMCLatitude.slice(0,2));                        \nvar minuteLat = parseFloat(GPRMCLatitude.slice(2));\nvar ddLat = LatDir*(degreeLat + (minuteLat/60))\nddLat = parseFloat(ddLat.toPrecision(5))    \n\n\nif (WorE == 'W') {\n    LonDir = -1\n}\nelse {\n    LonDir = 1\n}\n    \n\nvar degreeLon = parseFloat(GPRMCLongitude.slice(0,3));                        \nvar minuteLon = parseFloat(GPRMCLongitude.slice(3));\nvar ddLon = LonDir*(degreeLon + (minuteLon/60))\nddLon = parseFloat(ddLon.toPrecision(5))              \n\n\nmsg.payload = {\n  SentenceType : sentenceType,\n  Longitude: ddLon,\n  Latitude: ddLat,\n  FullSentence: str\n\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 580,
        "wires": [
            [
                "8c27aaa95a174f7a",
                "fcd69cece0d0c2e0"
            ]
        ]
    },
    {
        "id": "8c27aaa95a174f7a",
        "type": "debug",
        "z": "3a7412efe0b5441b",
        "name": "OutputDD",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 520,
        "wires": []
    },
    {
        "id": "a61aafc716df0154",
        "type": "rbe",
        "z": "3a7412efe0b5441b",
        "name": "",
        "func": "rbei",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": false,
        "property": "topic",
        "topi": "topic",
        "x": 1330,
        "y": 460,
        "wires": [
            [
                "d12fcac192520dc8",
                "b2bd26afe46a6f4f"
            ]
        ]
    },
    {
        "id": "3d45a041c5cf835c",
        "type": "change",
        "z": "3a7412efe0b5441b",
        "name": "Topic←POS",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "POS",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 970,
        "y": 300,
        "wires": [
            [
                "d789a796027ac22e"
            ]
        ]
    },
    {
        "id": "fcd69cece0d0c2e0",
        "type": "change",
        "z": "3a7412efe0b5441b",
        "name": "Topic←NEG",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "NEG",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 850,
        "y": 580,
        "wires": [
            [
                "f606359904cc7328"
            ]
        ]
    },
    {
        "id": "b2bd26afe46a6f4f",
        "type": "debug",
        "z": "3a7412efe0b5441b",
        "name": "msgTopic",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1500,
        "y": 380,
        "wires": []
    },
    {
        "id": "c83562b9c4878d1f",
        "type": "function",
        "z": "3a7412efe0b5441b",
        "name": "GPRMC Decoded Split",
        "func": "// Extracting the info from the joined data\n\nvar arrayZero = msg.payload[0];\nvar arrayOne = msg.payload[1];\n\nvar arrayZeroType = arrayZero.SentenceType;\nvar arrayOneType = arrayOne.SentenceType;\n\n\nif (arrayZeroType == \"AIVDM\"){\n    AISLon = arrayZero.Longitude\n    AISLat = arrayZero.Latitude\n    AISFullSentence = arrayZero.FullSentence\n    GPRMCLon = arrayOne.Longitude\n    GPRMCLat = arrayOne.Latitude\n}\nelse {\n    AISLon = arrayOne.Longitude\n    AISLat = arrayOne.Latitude\n    AISFullSentence = arrayOne.FullSentence\n    GPRMCLon = arrayZero.Longitude\n    GPRMCLat = arrayZero.Latitude\n}\n\n// Finding the distance between the BPXI and the retrieved AIS data\n\nlet R = 6371e3; // metres\nlet Theta1 = AISLat * Math.PI/180; //# φ, λ in radians\nlet Theta2 = GPRMCLat * Math.PI/180;\nlet deltaTheta = (GPRMCLat-AISLat) * Math.PI/180;\nlet deltaLambda = (GPRMCLon-AISLon) * Math.PI/180;\n\nlet a = Math.sin(deltaTheta/2) * Math.sin(deltaTheta/2) + Math.cos(Theta1) * Math.cos(Theta2) *Math.sin(deltaLambda/2) * Math.sin(deltaLambda/2);\nlet c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\nlet d = (R * c)/1852;\n\nmsg.payload = d;\n\n// return msg;\n\nif (msg.payload <= 1000){\n    msg.payload = AISFullSentence;\n    msg.reset = 1;\n    return msg;\n}\nelse {\n    msg.payload = \"not in boundary\"\n    msg.reset = 1;\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1860,
        "y": 460,
        "wires": [
            [
                "2357ad87fc76750e",
                "3d9371da7766dfbb"
            ]
        ]
    },
    {
        "id": "e73087a6c8305aec",
        "type": "debug",
        "z": "3a7412efe0b5441b",
        "name": "PAYLOAD",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1830,
        "y": 520,
        "wires": []
    },
    {
        "id": "981356e64eec0afb",
        "type": "comment",
        "z": "3a7412efe0b5441b",
        "name": "INCOMING GPRMC DATA",
        "info": "",
        "x": 170,
        "y": 460,
        "wires": []
    },
    {
        "id": "d789a796027ac22e",
        "type": "trigger",
        "z": "3a7412efe0b5441b",
        "name": "",
        "op1": "",
        "op2": "0",
        "op1type": "pay",
        "op2type": "str",
        "duration": "0",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1140,
        "y": 380,
        "wires": [
            [
                "a61aafc716df0154"
            ]
        ]
    },
    {
        "id": "f606359904cc7328",
        "type": "trigger",
        "z": "3a7412efe0b5441b",
        "name": "",
        "op1": "",
        "op2": "0",
        "op1type": "pay",
        "op2type": "str",
        "duration": "0",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1110,
        "y": 540,
        "wires": [
            [
                "a61aafc716df0154"
            ]
        ]
    },
    {
        "id": "60d35a570983fe6d",
        "type": "link in",
        "z": "3a7412efe0b5441b",
        "name": "",
        "links": [
            "2357ad87fc76750e"
        ],
        "x": 915,
        "y": 440,
        "wires": [
            [
                "d789a796027ac22e",
                "f606359904cc7328"
            ]
        ]
    },
    {
        "id": "2357ad87fc76750e",
        "type": "link out",
        "z": "3a7412efe0b5441b",
        "name": "",
        "mode": "link",
        "links": [
            "60d35a570983fe6d"
        ],
        "x": 1995,
        "y": 340,
        "wires": []
    },
    {
        "id": "3d9371da7766dfbb",
        "type": "function",
        "z": "3a7412efe0b5441b",
        "name": "GPRMC Decoded Split",
        "func": "if (msg.payload == \"not in boundary\"){}\nelse {return msg}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2120,
        "y": 460,
        "wires": [
            [
                "1fc3a1d283451d70"
            ]
        ]
    },
    {
        "id": "7f4082f3.ed5ecc",
        "type": "batch",
        "z": "3a7412efe0b5441b",
        "name": "",
        "mode": "count",
        "count": "3",
        "overlap": "2",
        "interval": 10,
        "allowEmptySequence": false,
        "topics": [],
        "x": 570,
        "y": 1060,
        "wires": [
            [
                "a15a0642.9fa4f8"
            ]
        ]
    },
    {
        "id": "309f5716.11e278",
        "type": "inject",
        "z": "3a7412efe0b5441b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "mov",
        "payloadType": "date",
        "x": 190,
        "y": 1060,
        "wires": [
            [
                "22f696db.2fd31a"
            ]
        ]
    },
    {
        "id": "22f696db.2fd31a",
        "type": "change",
        "z": "3a7412efe0b5441b",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "payload%10",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "mov",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 390,
        "y": 1060,
        "wires": [
            [
                "7f4082f3.ed5ecc"
            ]
        ]
    },
    {
        "id": "a15a0642.9fa4f8",
        "type": "debug",
        "z": "3a7412efe0b5441b",
        "name": "ok",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 730,
        "y": 1060,
        "wires": []
    },
    {
        "id": "bc95c600.8a7ff",
        "type": "inject",
        "z": "3a7412efe0b5441b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Door1",
        "payloadType": "str",
        "x": 150,
        "y": 1260,
        "wires": [
            [
                "e74f067f.68d2e8"
            ]
        ]
    },
    {
        "id": "40776dfa.949a94",
        "type": "inject",
        "z": "3a7412efe0b5441b",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Help1",
        "payloadType": "str",
        "x": 160.5,
        "y": 1399,
        "wires": [
            [
                "527b8184.c9bcc8"
            ]
        ]
    },
    {
        "id": "c04f22bc.ece308",
        "type": "inject",
        "z": "3a7412efe0b5441b",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Door2",
        "payloadType": "str",
        "x": 150.5,
        "y": 1299,
        "wires": [
            [
                "e74f067f.68d2e8"
            ]
        ]
    },
    {
        "id": "2a297a3f.5793fe",
        "type": "inject",
        "z": "3a7412efe0b5441b",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Help2",
        "payloadType": "str",
        "x": 159.5,
        "y": 1440,
        "wires": [
            [
                "527b8184.c9bcc8"
            ]
        ]
    },
    {
        "id": "e74f067f.68d2e8",
        "type": "change",
        "z": "3a7412efe0b5441b",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "door",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 297,
        "y": 1280,
        "wires": [
            [
                "6eed31e.adb2c5"
            ]
        ]
    },
    {
        "id": "527b8184.c9bcc8",
        "type": "change",
        "z": "3a7412efe0b5441b",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "help",
                "pt": "msg",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 303.5,
        "y": 1417,
        "wires": [
            [
                "20dcad07.a5a60a"
            ]
        ]
    },
    {
        "id": "6eed31e.adb2c5",
        "type": "change",
        "z": "3a7412efe0b5441b",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "door",
                "pt": "global",
                "to": "door",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 524,
        "y": 1279,
        "wires": [
            [
                "3d0d745f.6cadcc"
            ]
        ]
    },
    {
        "id": "20dcad07.a5a60a",
        "type": "change",
        "z": "3a7412efe0b5441b",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "help",
                "pt": "global",
                "to": "help",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 519.5,
        "y": 1416,
        "wires": [
            [
                "7f16357b.4d0cdc"
            ]
        ]
    },
    {
        "id": "3d0d745f.6cadcc",
        "type": "change",
        "z": "3a7412efe0b5441b",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "help",
                "pt": "msg",
                "to": "help",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 758.5,
        "y": 1277,
        "wires": [
            [
                "7d2010bf.72b2e8"
            ]
        ]
    },
    {
        "id": "7f16357b.4d0cdc",
        "type": "change",
        "z": "3a7412efe0b5441b",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "door",
                "pt": "msg",
                "to": "door",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 750,
        "y": 1420,
        "wires": [
            [
                "7d2010bf.72b2e8"
            ]
        ]
    },
    {
        "id": "7d2010bf.72b2e8",
        "type": "debug",
        "z": "3a7412efe0b5441b",
        "name": "door",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1110,
        "y": 1480,
        "wires": []
    },
    {
        "id": "715ae02.ffcb82",
        "type": "function",
        "z": "3a7412efe0b5441b",
        "name": "Wait for all tasks to finish",
        "func": "context.data = context.data || new Object();\n\nswitch (msg.topic) {\n    case \"task1\":\n        context.data.task1 = msg.payload;\n        msg = null;\n        break;\n    case \"task2\":\n        context.data.task2 = msg.payload;\n        msg = null;\n        break;\n    case \"task3\":\n        context.data.task3 = msg.payload;\n        msg = null;\n        break;\n        \n    default:\n        msg = null;\n    \tbreak;\n\n}\n\nif(context.data.task1 != null && context.data.task2 != null && context.data.task3 != null) {\n\tmsg2 = new Object();\n    msg2 = context.data;\n    context.data=null;\n\treturn msg2;\n} else return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 1820,
        "wires": [
            [
                "1db3a013.cd5468"
            ]
        ]
    },
    {
        "id": "33b2850d.f24e6a",
        "type": "delay",
        "z": "3a7412efe0b5441b",
        "name": "Random delay",
        "pauseType": "random",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 432,
        "y": 1729,
        "wires": [
            [
                "715ae02.ffcb82"
            ]
        ]
    },
    {
        "id": "1db3a013.cd5468",
        "type": "debug",
        "z": "3a7412efe0b5441b",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 897,
        "y": 1819,
        "wires": []
    },
    {
        "id": "35eb6e77.0f77da",
        "type": "delay",
        "z": "3a7412efe0b5441b",
        "name": "Random delay",
        "pauseType": "random",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 436,
        "y": 1825,
        "wires": [
            [
                "715ae02.ffcb82"
            ]
        ]
    },
    {
        "id": "c8ab7682.98ada",
        "type": "delay",
        "z": "3a7412efe0b5441b",
        "name": "Random delay",
        "pauseType": "random",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 433,
        "y": 1909,
        "wires": [
            [
                "715ae02.ffcb82"
            ]
        ]
    },
    {
        "id": "1ccffde6.02aa52",
        "type": "function",
        "z": "3a7412efe0b5441b",
        "name": "Task1",
        "func": "msg.topic=\"task1\";\nmsg.payload=\"Task1's payload\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 264,
        "y": 1729,
        "wires": [
            [
                "33b2850d.f24e6a"
            ]
        ]
    },
    {
        "id": "fe4cbb39.4f93c8",
        "type": "function",
        "z": "3a7412efe0b5441b",
        "name": "Task2",
        "func": "msg.topic=\"task2\";\nmsg.payload=\"Task2's payload\"\nreturn msg;",
        "outputs": 1,
        "x": 267,
        "y": 1824,
        "wires": [
            [
                "35eb6e77.0f77da"
            ]
        ]
    },
    {
        "id": "c3766a5d.afab88",
        "type": "function",
        "z": "3a7412efe0b5441b",
        "name": "Task3",
        "func": "msg.topic=\"task3\";\nmsg.payload=\"Task3's payload\"\nreturn msg;",
        "outputs": 1,
        "x": 262,
        "y": 1908,
        "wires": [
            [
                "c8ab7682.98ada"
            ]
        ]
    },
    {
        "id": "2dc185ba.57852a",
        "type": "inject",
        "z": "3a7412efe0b5441b",
        "name": "Start",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payloadType": "str",
        "x": 98,
        "y": 1813,
        "wires": [
            [
                "1ccffde6.02aa52",
                "fe4cbb39.4f93c8",
                "c3766a5d.afab88"
            ]
        ]
    }
]
